import { NextRequest, NextResponse } from 'next/server';
import { checkBuildEnvironment } from '@/lib/build-check';
import { executeQuery } from '@/lib/database';

// API OTIMIZADA para gera√ß√£o R√ÅPIDA de descri√ß√µes do marketplace
export async function POST(request: NextRequest) {
  try {
    // Evitar execu√ß√£o durante o build do Next.js
    if (checkBuildEnvironment()) {
      return NextResponse.json({ error: 'API n√£o dispon√≠vel durante build' }, { status: 503 });
    }

    console.log('üöÄ Iniciando gera√ß√£o R√ÅPIDA de descri√ß√£o do Marketplace...');
    
    let body;
    try {
      body = await request.json();
      console.log('üìù Body recebido:', body);
    } catch (parseError) {
      console.error('‚ùå Erro ao fazer parse do JSON:', parseError);
      return NextResponse.json({
        success: false,
        message: 'Erro ao processar dados da requisi√ß√£o'
      }, { status: 400 });
    }
    
    const { productId, forceRegenerate = false } = body;

    if (!productId) {
      console.log('‚ùå productId n√£o fornecido');
      return NextResponse.json({
        success: false,
        message: 'productId √© obrigat√≥rio'
      }, { status: 400 });
    }

    // Validar se productId √© um n√∫mero
    const numericProductId = parseInt(productId);
    if (isNaN(numericProductId)) {
      console.log('‚ùå productId inv√°lido:', productId);
      return NextResponse.json({
        success: false,
        message: 'productId deve ser um n√∫mero v√°lido'
      }, { status: 400 });
    }

    console.log('üöÄ Gerando descri√ß√£o R√ÅPIDA do Marketplace para produto ID:', productId);

    // 1. Buscar dados b√°sicos do produto (OTIMIZADO: apenas campos essenciais)
    console.log('üîç Buscando dados b√°sicos do produto...');
    let products;
    try {
      const productQuery = `
        SELECT 
          p.id, p.name, p.ref_id, p.description, p.brand_id, p.category_id,
          b.name as brand_name,
          c.name as category_name
        FROM products_vtex p
        LEFT JOIN brands b ON p.brand_id = b.id
        LEFT JOIN categories_vtex c ON p.category_id = c.vtex_id
        WHERE p.id = ?
      `;
      products = await executeQuery(productQuery, [numericProductId]);
      
      if (!products || products.length === 0) {
        console.log('‚ùå Produto n√£o encontrado:', numericProductId);
        return NextResponse.json({
          success: false,
          message: 'Produto n√£o encontrado'
        }, { status: 404 });
      }
      
      console.log('‚úÖ Produto encontrado:', products[0].name);
    } catch (dbError) {
      console.error('‚ùå Erro ao buscar produto:', dbError);
      return NextResponse.json({
        success: false,
        message: 'Erro ao buscar dados do produto'
      }, { status: 500 });
    }

    const product = products[0];

    // 2. Verificar se j√° existe descri√ß√£o (se n√£o for regenera√ß√£o for√ßada)
    if (!forceRegenerate) {
      console.log('üîç Verificando se j√° existe descri√ß√£o...');
      try {
        const existingQuery = `SELECT * FROM marketplace WHERE product_id = ?`;
        const existing = await executeQuery(existingQuery, [numericProductId]);
        console.log('üìä Descri√ß√µes existentes:', existing?.length || 0);
        
        if (existing && existing.length > 0) {
          console.log('‚úÖ Descri√ß√£o j√° existe, retornando...');
          return NextResponse.json({
            success: true,
            data: existing[0],
            message: 'Descri√ß√£o j√° existe'
          });
        }
      } catch (error) {
        console.log('‚ö†Ô∏è Erro ao verificar descri√ß√µes existentes:', error);
        // Continuar com a gera√ß√£o mesmo se houver erro na verifica√ß√£o
      }
    }

    // 3. Gerar descri√ß√£o r√°pida com IA (OTIMIZADO)
    console.log('ü§ñ Gerando descri√ß√£o R√ÅPIDA com IA...');
    const startTime = Date.now();
    const openaiResponse = await generateFastDescription(product, numericProductId);
    const generationTime = Date.now() - startTime;
    console.log(`ü§ñ Resposta da OpenAI (${generationTime}ms):`, openaiResponse.success ? 'Sucesso' : 'Erro');
    
    if (!openaiResponse.success) {
      console.log('‚ùå Erro na OpenAI:', openaiResponse.error);
      return NextResponse.json({
        success: false,
        message: openaiResponse.error || 'Erro ao gerar descri√ß√£o com IA'
      }, { status: 500 });
    }

    const { title, description, clothing_type, sleeve_type, gender, color, modelo, tokensUsed } = openaiResponse.data || {};
    console.log('üìù Dados gerados:', { title, description: description?.substring(0, 50) + '...' });

    // 4. Salvar no banco de dados
    console.log('üíæ Salvando no banco de dados...');
    let saveResult;
    try {
      saveResult = await saveMarketplaceDescription({
        productId: numericProductId,
        title,
        description,
        openaiModel: 'gpt-4o-mini',
        tokensUsed: tokensUsed || 0,
        tokensPrompt: 0,
        tokensCompletion: 0,
        cost: 0,
        requestId: '',
        responseTime: generationTime,
        maxTokens: 2000,
        temperature: 0.5,
      });
      
      console.log('üíæ Resultado do salvamento:', saveResult.success ? 'Sucesso' : 'Erro');
      
      if (!saveResult.success) {
        console.log('‚ùå Erro ao salvar:', saveResult.message);
        return NextResponse.json({
          success: false,
          message: 'Erro ao salvar descri√ß√£o no banco de dados'
        }, { status: 500 });
      }
    } catch (saveError) {
      console.error('‚ùå Erro ao salvar no banco:', saveError);
      return NextResponse.json({
        success: false,
        message: 'Erro ao salvar descri√ß√£o no banco de dados'
      }, { status: 500 });
    }

    console.log('‚úÖ Descri√ß√£o R√ÅPIDA do Marketplace gerada com sucesso!');
    return NextResponse.json({
      success: true,
      data: {
        ...saveResult.data,
        title,
        description,
        clothing_type,
        sleeve_type,
        gender,
        color,
        modelo,
        tokensUsed,
        generationTime
      }
    });

  } catch (error: any) {
    console.error('‚ùå Erro ao gerar descri√ß√£o R√ÅPIDA do Marketplace:', error);
    
    return NextResponse.json({
      success: false,
      message: 'Erro interno do servidor ao gerar descri√ß√£o',
      error: error.message
    }, { status: 500 });
  }
}

// Fun√ß√£o otimizada para gera√ß√£o r√°pida de descri√ß√µes
async function generateFastDescription(
  product: any, 
  productId: number
): Promise<{ success: boolean; data?: any; error?: string }> {
  try {
    console.log('ü§ñ Iniciando gera√ß√£o R√ÅPIDA com OpenAI...');
    console.log('üì¶ Produto:', product.name);

    // Buscar chave da OpenAI das vari√°veis de ambiente
    const openaiApiKey = process.env.OPENAI_API_KEY;
    
    if (!openaiApiKey || openaiApiKey.trim() === '') {
      throw new Error('Chave da API OpenAI n√£o configurada. Configure OPENAI_API_KEY no arquivo .env.');
    }

    // Prompt otimizado e mais curto para resposta mais r√°pida
    const systemPrompt = `Voc√™ √© um especialista em e-commerce. Crie t√≠tulos e descri√ß√µes otimizadas para marketplace de forma R√ÅPIDA e EFICIENTE.

REGRAS:
- T√≠tulo: m√°ximo 60 caracteres, incluir marca, categoria, g√™nero e cor
- Descri√ß√£o: 200-300 palavras, estruturada e persuasiva
- Use HTML b√°sico: <b>, <br>, <li>
- Seja criativo mas conciso
- Foque em benef√≠cios e caracter√≠sticas principais

FORMATO JSON:
{
  "title": "t√≠tulo otimizado",
  "description": "descri√ß√£o estruturada",
  "clothing_type": "tipo de roupa",
  "sleeve_type": "tipo de manga",
  "gender": "g√™nero",
  "color": "cor principal",
  "modelo": "5 varia√ß√µes separadas por v√≠rgula"
}`;

    const userPrompt = `Crie uma descri√ß√£o otimizada para marketplace:

PRODUTO: ${product.name}
MARCA: ${product.brand_name || 'N/A'}
CATEGORIA: ${product.category_name || 'N/A'}
REF_ID: ${product.ref_id || 'N/A'}
DESCRI√á√ÉO ATUAL: ${product.description || 'N/A'}

Gere t√≠tulo e descri√ß√£o otimizados de forma R√ÅPIDA e EFICIENTE.`;

    console.log('üåê Chamando API da OpenAI (modo ULTRA R√ÅPIDO)...');
    const startTime = Date.now();
    
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openaiApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini', // Modelo mais r√°pido
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: userPrompt }
        ],
        max_tokens: 1500, // Reduzido para resposta mais r√°pida
        temperature: 0.3, // Baixa temperatura para resposta mais r√°pida
        response_format: { type: 'json_object' },
        stream: false
      }),
    });

    if (!response.ok) {
      const errorData = await response.text();
      console.error('‚ùå Erro na API OpenAI:', response.status, errorData);
      throw new Error(`Erro na API OpenAI: ${response.status} - ${errorData}`);
    }

    const responseTime = Date.now() - startTime;
    const data = await response.json();
    
    console.log('‚úÖ Resposta da OpenAI recebida');
    console.log('‚è±Ô∏è Tempo de resposta:', responseTime, 'ms');
    console.log('üî¢ Tokens utilizados:', data.usage?.total_tokens || 0);

    const content = data.choices[0].message.content;
    if (!content) {
      throw new Error('Resposta vazia da OpenAI');
    }

    const parsedContent = JSON.parse(content);
    console.log('üìã Conte√∫do parseado:', JSON.stringify(parsedContent, null, 2));

    return {
      success: true,
      data: {
        title: parsedContent.title || 'Produto de Vestu√°rio',
        description: parsedContent.description || 'Descri√ß√£o n√£o dispon√≠vel',
        clothing_type: parsedContent.clothing_type || 'Produto de Vestu√°rio',
        sleeve_type: parsedContent.sleeve_type || 'Curta',
        gender: parsedContent.gender || 'Sem g√™nero',
        color: parsedContent.color || 'Multicolorido',
        modelo: parsedContent.modelo || 'Produto B√°sico, Produto Casual, Produto Simples, Produto Essencial, Produto Vers√°til',
        tokensUsed: data.usage?.total_tokens || 0,
        responseTime: responseTime
      }
    };

  } catch (error: any) {
    console.error('‚ùå Erro na gera√ß√£o R√ÅPIDA com OpenAI:', error);
    return {
      success: false,
      error: error.message
    };
  }
}

// Fun√ß√£o para salvar descri√ß√£o no banco (reutilizada da API original)
async function saveMarketplaceDescription(data: any) {
  try {
    const insertQuery = `
      INSERT INTO marketplace (
        product_id, title, description, openai_model, tokens_used, 
        tokens_prompt, tokens_completion, cost, request_id, response_time,
        max_tokens, temperature, created_at, updated_at
      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, NOW(), NOW())
      ON DUPLICATE KEY UPDATE
        title = VALUES(title),
        description = VALUES(description),
        openai_model = VALUES(openai_model),
        tokens_used = VALUES(tokens_used),
        tokens_prompt = VALUES(tokens_prompt),
        tokens_completion = VALUES(tokens_completion),
        cost = VALUES(cost),
        request_id = VALUES(request_id),
        response_time = VALUES(response_time),
        max_tokens = VALUES(max_tokens),
        temperature = VALUES(temperature),
        updated_at = NOW()
    `;

    const result = await executeQuery(insertQuery, [
      data.productId,
      data.title,
      data.description,
      data.openaiModel,
      data.tokensUsed,
      data.tokensPrompt,
      data.tokensCompletion,
      data.cost,
      data.requestId,
      data.responseTime,
      data.maxTokens,
      data.temperature
    ]);

    return {
      success: true,
      data: {
        id: result.insertId,
        product_id: data.productId,
        title: data.title,
        description: data.description
      }
    };
  } catch (error: any) {
    console.error('‚ùå Erro ao salvar descri√ß√£o:', error);
    return {
      success: false,
      message: error.message
    };
  }
}
