import { NextRequest, NextResponse } from 'next/server';
import { checkBuildEnvironment } from '@/lib/build-check';
import { executeQuery } from '@/lib/database';

export async function POST(request: NextRequest) {
  try {
    // Evitar execu√ß√£o durante o build do Next.js
    if (checkBuildEnvironment()) {
      return NextResponse.json({ error: 'API n√£o dispon√≠vel durante build' }, { status: 503 });
    }

    const body = await request.json();
    const { productId } = body;

    if (!productId) {
      return NextResponse.json({
        success: false,
        message: 'ID do produto √© obrigat√≥rio'
      }, { status: 400 });
    }

    const numericProductId = parseInt(productId);
    if (isNaN(numericProductId)) {
      return NextResponse.json({
        success: false,
        message: 'ID do produto deve ser um n√∫mero v√°lido'
      }, { status: 400 });
    }

    console.log('ü§ñ Gerando caracter√≠sticas para produto ID:', numericProductId);

    // 1. Buscar dados do produto
    console.log('üîç Buscando dados do produto...');
    let products;
    try {
      const productQuery = `
        SELECT 
          p.*,
          b.name as brand_name,
          c.name as category_name
        FROM products_vtex p
        LEFT JOIN brands_vtex b ON p.id_brand_vtex = b.id_brand_vtex
        LEFT JOIN categories_vtex c ON p.id_category_vtex = c.id_category_vtex
        WHERE p.id_produto_vtex = ?
      `;

      products = await executeQuery(productQuery, [numericProductId]);
      console.log('üìä Resultado da busca do produto:', products?.length || 0, 'registros');
    } catch (dbError) {
      console.error('‚ùå Erro ao buscar produto no banco:', dbError);
      return NextResponse.json({
        success: false,
        message: 'Erro ao buscar produto no banco de dados'
      }, { status: 500 });
    }
    
    if (!products || products.length === 0) {
      console.log('‚ùå Produto n√£o encontrado');
      return NextResponse.json({
        success: false,
        message: 'Produto n√£o encontrado'
      }, { status: 404 });
    }

    const product = products[0];
    console.log('üì¶ Produto encontrado:', product.name);

    // Buscar atributos do produto da tabela product_attributes_vtex
    let productAttributes = [];
    try {
      const productAttributesQuery = `
        SELECT attribute_name, attribute_value
        FROM product_attributes_vtex
        WHERE id_product_vtex = ?
        ORDER BY attribute_name
      `;
      productAttributes = await executeQuery(productAttributesQuery, [numericProductId]);
      console.log(`üìã ${productAttributes?.length || 0} atributos encontrados para o produto`);
    } catch (error) {
      console.log('‚ö†Ô∏è Erro ao buscar atributos do produto:', error);
      productAttributes = [];
    }

    // 2. Buscar an√°lise de imagem
    console.log('üîç Buscando an√°lise de imagem...');
    let imageAnalysis = null;
    try {
      const analysisQuery = `
        SELECT 
          ai.*
        FROM analise_imagens ai
        WHERE ai.id_produto_vtex = ?
        ORDER BY ai.generated_at DESC
        LIMIT 1
      `;
      
      const analysisResult = await executeQuery(analysisQuery, [numericProductId]);
      if (analysisResult && analysisResult.length > 0) {
        imageAnalysis = analysisResult[0];
        console.log('üñºÔ∏è An√°lise de imagem encontrada');
      } else {
        console.log('‚ö†Ô∏è Nenhuma an√°lise de imagem encontrada');
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Erro ao buscar an√°lise de imagem:', error);
    }

    // 3. Buscar descri√ß√£o do marketplace
    console.log('üîç Buscando descri√ß√£o do marketplace...');
    let marketplaceDescription = null;
    try {
      const marketplaceQuery = `
        SELECT * FROM descriptions 
        WHERE id_product_vtex = ? 
        ORDER BY created_at DESC 
        LIMIT 1
      `;
      
      const marketplaceResult = await executeQuery(marketplaceQuery, [numericProductId]);
      if (marketplaceResult && marketplaceResult.length > 0) {
        marketplaceDescription = marketplaceResult[0];
        console.log('üìù Descri√ß√£o do marketplace encontrada');
      } else {
        console.log('‚ö†Ô∏è Nenhuma descri√ß√£o do marketplace encontrada');
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Erro ao buscar descri√ß√£o do marketplace:', error);
    }

    // 4. Buscar caracter√≠sticas ativas que se aplicam √† categoria do produto
    console.log('üîç Buscando caracter√≠sticas ativas para a categoria do produto...');
    let characteristics = [];
    try {
      // Verificar se o produto tem categoria
      if (!product.id_category_vtex) {
        console.log('‚ö†Ô∏è Produto n√£o possui categoria definida');
        return NextResponse.json({
          success: false,
          message: 'Produto n√£o possui categoria definida. N√£o √© poss√≠vel gerar caracter√≠sticas.'
        }, { status: 400 });
      }

      // Buscar caracter√≠sticas que se aplicam √† categoria do produto
      const characteristicsQuery = `
        SELECT id, caracteristica, pergunta_ia, valores_possiveis
        FROM caracteristicas 
        WHERE is_active = 1 
        AND (
          categorias LIKE ? 
          OR categorias LIKE ?
          OR categorias LIKE ?
          OR categorias = ''
          OR categorias IS NULL
          OR categorias = '[]'
          OR categorias = '{}'
        )
        ORDER BY caracteristica
      `;
      
      const characteristicsResult = await executeQuery(characteristicsQuery, [
        `%${product.id_category_vtex}%`,
        `"${product.id_category_vtex}"`,
        `'${product.id_category_vtex}'`
      ]);
      characteristics = characteristicsResult || [];
      
      console.log(`üìã ${characteristics.length} caracter√≠sticas ativas encontradas para categoria ID ${product.id_category_vtex}`);
      
      if (!characteristics || characteristics.length === 0) {
        console.log('‚ö†Ô∏è Nenhuma caracter√≠stica configurada para esta categoria');
        return NextResponse.json({
          success: false,
          message: `Nenhuma caracter√≠stica est√° configurada para a categoria "${product.category_name || 'ID: ' + product.id_category_vtex}". Configure as caracter√≠sticas para esta categoria primeiro.`
        }, { status: 400 });
      }
      
      console.log(`üìä Encontradas ${characteristics.length} caracter√≠sticas ativas para esta categoria`);
    } catch (error) {
      console.log('‚ö†Ô∏è Erro ao buscar caracter√≠sticas:', error);
      return NextResponse.json({
        success: false,
        message: 'Erro ao buscar caracter√≠sticas ativas'
      }, { status: 500 });
    }

    // 5. Configurar agente de caracter√≠sticas (hardcoded)
    console.log('ü§ñ Configurando agente de caracter√≠sticas...');
    const agent = {
      name: 'Agente Caracter√≠sticas',
      system_prompt: 'Voc√™ √© um especialista em an√°lise de produtos para e-commerce com expertise em moda, design e caracter√≠sticas visuais.',
      model: 'gpt-4o-mini',
      max_tokens: 3000,
      temperature: 0.1
    };
    
    console.log(`ü§ñ Usando agente: ${agent.name} (Modelo: ${agent.model})`);

    // 6. Verificar se OpenAI API Key est√° configurada
    const openaiApiKey = process.env.OPENAI_API_KEY;
    if (!openaiApiKey) {
      console.log('‚ùå OpenAI API Key n√£o configurada');
      return NextResponse.json({
        success: false,
        message: 'OpenAI API Key n√£o configurada'
      }, { status: 500 });
    }

    // 7. Construir prompt para o agente evolu√≠do
    const systemPrompt = `Voc√™ √© um especialista em an√°lise de produtos para e-commerce com expertise em moda, design e caracter√≠sticas visuais. Sua tarefa √© analisar produtos e responder perguntas sobre suas caracter√≠sticas com m√°xima precis√£o.

REGRAS CR√çTICAS:
1. Se voc√™ N√ÉO conseguir identificar uma caracter√≠stica com confian√ßa baseada nas informa√ß√µes dispon√≠veis, use "N/A" como resposta
2. NUNCA invente ou assuma caracter√≠sticas que n√£o est√£o claramente vis√≠veis ou descritas
3. Seja espec√≠fico e preciso - evite respostas gen√©ricas como "pode variar"
4. Use apenas informa√ß√µes que est√£o explicitamente dispon√≠veis nas imagens, descri√ß√µes ou dados do produto
5. Para cores, use nomes espec√≠ficos (ex: "Azul marinho", "Branco off-white")
6. Para materiais, seja espec√≠fico (ex: "Algod√£o 100%", "Poli√©ster com elastano")

IMPORTANTE: Voc√™ DEVE sempre retornar suas respostas em formato JSON v√°lido, com um array de respostas para cada caracter√≠stica solicitada.

Formato obrigat√≥rio da resposta:
{
  "respostas": [
    {
      "caracteristica": "Nome da Caracter√≠stica",
      "resposta": "Resposta espec√≠fica ou N/A se n√£o identific√°vel"
    }
  ]
}

${agent.system_prompt || ''}`;

    // Preparar lista de atributos do produto
    let attributesInfo = '';
    if (productAttributes && productAttributes.length > 0) {
      attributesInfo = `

=== ATRIBUTOS T√âCNICOS DO PRODUTO ===
${productAttributes.map(attr => {
  const values = typeof attr.attribute_values === 'string' 
    ? JSON.parse(attr.attribute_values) 
    : attr.attribute_values;
  const valuesList = Array.isArray(values) ? values.join(', ') : values;
  return `‚Ä¢ ${attr.attribute_name}: ${valuesList}`;
}).join('\n')}`;
    }

    const userPrompt = `=== INFORMA√á√ïES DO PRODUTO ===
Nome: ${product.name}
Ref ID: ${product.ref_id || 'N/A'}
Marca: ${product.brand_name || 'N/A'}
Categoria: ${product.category_name || 'N/A'}
Descri√ß√£o: ${product.description || 'N/A'}${attributesInfo}

=== AN√ÅLISE DE IMAGEM ===
${imageAnalysis ? imageAnalysis.contextualizacao || 'An√°lise dispon√≠vel' : 'N√£o dispon√≠vel'}

=== DESCRI√á√ÉO DO MARKETPLACE ===
${marketplaceDescription ? `
T√≠tulo: ${marketplaceDescription.title}
Descri√ß√£o: ${marketplaceDescription.description}
` : 'N√£o dispon√≠vel'}

=== INSTRU√á√ïES DE AN√ÅLISE ===
Analise cuidadosamente TODAS as informa√ß√µes dispon√≠veis acima. Para cada caracter√≠stica solicitada:

1. **Identifique se a informa√ß√£o est√° dispon√≠vel** nas imagens, descri√ß√µes ou dados do produto
2. **Se a informa√ß√£o estiver clara e espec√≠fica**, forne√ßa uma resposta precisa
3. **Se a informa√ß√£o n√£o estiver dispon√≠vel ou for amb√≠gua**, use "N/A"
4. **Seja espec√≠fico**: evite respostas gen√©ricas como "pode variar" ou "depende"
5. **Use terminologia t√©cnica apropriada** para o tipo de produto

=== CARACTER√çSTICAS A SEREM RESPONDIDAS ===
${characteristics.map((char: any) => 
  `${char.id}. ${char.caracteristica}: ${char.pergunta_ia}
   Valores poss√≠veis: ${char.valores_possiveis || 'N/A'}
   Instru√ß√£o: ${char.pergunta_ia.includes('cor') ? 'Identifique a cor espec√≠fica vis√≠vel nas imagens' : 
              char.pergunta_ia.includes('material') ? 'Identifique o material espec√≠fico mencionado' :
              char.pergunta_ia.includes('tamanho') ? 'Identifique o tamanho espec√≠fico dispon√≠vel' :
              'Analise cuidadosamente a caracter√≠stica solicitada'}`
).join('\n\n')}

=== FORMATO DE RESPOSTA OBRIGAT√ìRIO ===
Responda no formato JSON exato abaixo, preenchendo uma resposta para cada uma das ${characteristics.length} caracter√≠sticas:

{
  "respostas": [
${characteristics.map((char: any, index: number) => 
    `    {
      "caracteristica": "${char.caracteristica}",
      "resposta": "RESPONDA AQUI PARA ${char.caracteristica} OU N/A SE N√ÉO IDENTIFIC√ÅVEL"
    }${index < characteristics.length - 1 ? ',' : ''}`
).join('\n')}
  ]
}

IMPORTANTE: 
- Responda TODAS as ${characteristics.length} caracter√≠sticas
- Use exatamente os nomes das caracter√≠sticas como mostrado
- Retorne apenas o JSON, sem texto adicional
- Use "N/A" se n√£o conseguir identificar a caracter√≠stica com confian√ßa
- Seja espec√≠fico e preciso nas respostas
`;

    console.log('üåê Chamando API da OpenAI para caracter√≠sticas...');
    const startTime = Date.now();
    
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openaiApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: agent.model,
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: userPrompt }
        ],
        max_tokens: agent.max_tokens,
        temperature: agent.temperature,
        response_format: { type: 'json_object' },
        top_p: 0.9, // Par√¢metro para melhor qualidade
        frequency_penalty: 0.1, // Reduz repeti√ß√µes
        presence_penalty: 0.1 // Incentiva diversidade
      }),
    });

    if (!response.ok) {
      const errorData = await response.text();
      console.error('‚ùå Erro na API OpenAI para caracter√≠sticas:', response.status, errorData);
      throw new Error(`Erro na API OpenAI: ${response.status}`);
    }

    const responseData = await response.json();
    const endTime = Date.now();
    const responseTime = endTime - startTime;

    console.log('‚úÖ Resposta das caracter√≠sticas recebida');
    console.log(`‚è±Ô∏è Tempo de resposta: ${responseTime}ms`);

    const content = responseData.choices[0]?.message?.content;
    if (!content) {
      throw new Error('Resposta vazia da OpenAI');
    }

    console.log('üìÑ Conte√∫do bruto da resposta:', content);
    console.log('üìÑ Tamanho da resposta:', content.length, 'caracteres');
    
    const parsedContent = JSON.parse(content);
    console.log('üìã Conte√∫do parseado:', JSON.stringify(parsedContent, null, 2));
    console.log('üìã Tipo do objeto:', typeof parsedContent);
    console.log('üìã Chaves do objeto:', Object.keys(parsedContent));
    
    const respostas = parsedContent.respostas || [];

    console.log(`üìä Respostas geradas: ${respostas.length}`);
    console.log(`üìä Caracter√≠sticas esperadas: ${characteristics.length}`);
    console.log(`üìä Respostas detalhadas:`, JSON.stringify(respostas, null, 2));

    // Validar se todas as caracter√≠sticas foram respondidas
    const caracteristicasRespondidas = respostas.map((r: any) => r.caracteristica);
    const caracteristicasEsperadas = characteristics.map(c => c.caracteristica);
    const caracteristicasFaltando = caracteristicasEsperadas.filter(c => !caracteristicasRespondidas.includes(c));
    
    console.log(`üìä Caracter√≠sticas esperadas: ${caracteristicasEsperadas.join(', ')}`);
    console.log(`üìä Caracter√≠sticas respondidas: ${caracteristicasRespondidas.join(', ')}`);
    
    if (caracteristicasFaltando.length > 0) {
      console.warn(`‚ö†Ô∏è Caracter√≠sticas n√£o respondidas: ${caracteristicasFaltando.join(', ')}`);
      console.warn(`‚ö†Ô∏è Apenas ${respostas.length} de ${characteristics.length} caracter√≠sticas foram respondidas`);
    } else {
      console.log(`‚úÖ Todas as ${characteristics.length} caracter√≠sticas foram respondidas`);
    }
    
    // Se n√£o h√° respostas, n√£o continuar
    if (respostas.length === 0) {
      console.error(`‚ùå Nenhuma resposta foi gerada pela IA`);
      console.log(`üîç Vamos tentar salvar mesmo assim para debug...`);
    }

    // 8. Salvar respostas no banco
    let savedCount = 0;
    console.log(`üîÑ Iniciando loop para salvar ${respostas.length} respostas...`);
    
    // Primeiro, deletar respostas existentes para este produto (regenera√ß√£o)
    console.log(`üóëÔ∏è Deletando respostas existentes para produto ${numericProductId} (regenera√ß√£o)...`);
    try {
      const deleteResult = await executeQuery(`DELETE FROM respostas_caracteristicas WHERE produto_id = ?`, [numericProductId]);
      console.log(`‚úÖ Respostas existentes deletadas para produto ${numericProductId}`);
    } catch (deleteError) {
      console.error(`‚ùå Erro ao deletar respostas existentes:`, deleteError);
      // Continuar mesmo com erro de delete, pois pode ser que n√£o existam registros
    }
    
    // Filtrar e validar respostas antes de salvar
    const respostasValidas = respostas.filter((resposta: any) => {
      const respostaLimpa = resposta.resposta?.trim().toLowerCase();
      const isValida = respostaLimpa && 
                      respostaLimpa !== 'n/a' && 
                      respostaLimpa !== 'na' && 
                      respostaLimpa !== 'n√£o dispon√≠vel' &&
                      respostaLimpa !== 'n√£o identific√°vel' &&
                      respostaLimpa !== 'n√£o aplic√°vel' &&
                      respostaLimpa !== 'n√£o se aplica' &&
                      respostaLimpa !== 'n√£o especificado' &&
                      respostaLimpa !== 'n√£o informado' &&
                      respostaLimpa !== 'n√£o definido' &&
                      respostaLimpa !== 'n√£o determinado' &&
                      respostaLimpa !== 'n√£o identificado' &&
                      respostaLimpa !== 'n√£o encontrado' &&
                      respostaLimpa !== 'n√£o dispon√≠vel' &&
                      respostaLimpa !== 'n√£o aplic√°vel' &&
                      respostaLimpa !== 'n√£o se aplica' &&
                      respostaLimpa !== 'n√£o especificado' &&
                      respostaLimpa !== 'n√£o informado' &&
                      respostaLimpa !== 'n√£o definido' &&
                      respostaLimpa !== 'n√£o determinado' &&
                      respostaLimpa !== 'n√£o identificado' &&
                      respostaLimpa !== 'n√£o encontrado' &&
                      respostaLimpa.length > 2; // Evita respostas muito curtas
      
      if (!isValida) {
        console.log(`‚ö†Ô∏è Resposta filtrada para "${resposta.caracteristica}": "${resposta.resposta}" (considerada inv√°lida)`);
      }
      
      return isValida;
    });

    console.log(`üìä Respostas v√°lidas ap√≥s filtro: ${respostasValidas.length} de ${respostas.length}`);

    // Agora inserir/atualizar apenas as respostas v√°lidas
    for (let i = 0; i < respostasValidas.length; i++) {
      const resposta = respostasValidas[i];
      console.log(`üíæ [${i+1}/${respostasValidas.length}] Salvando/atualizando resposta para caracter√≠stica "${resposta.caracteristica}": "${resposta.resposta}"`);
      const upsertQuery = `
        INSERT INTO respostas_caracteristicas 
        (produto_id, caracteristica, resposta, tokens_usados, created_at, updated_at)
        VALUES (?, ?, ?, ?, NOW(), NOW())
        ON DUPLICATE KEY UPDATE
        resposta = VALUES(resposta),
        tokens_usados = VALUES(tokens_usados),
        updated_at = NOW()
      `;
      
      try {
        await executeQuery(upsertQuery, [
          numericProductId,
          resposta.caracteristica,
          resposta.resposta,
          responseData.usage?.total_tokens || 0
        ]);
        console.log(`‚úÖ Resposta salva/atualizada para caracter√≠stica ${resposta.caracteristica}`);
        savedCount++;
      } catch (insertError) {
        console.error(`‚ùå Erro ao salvar resposta para caracter√≠stica ${resposta.caracteristica}:`, insertError);
      }
    }

    console.log(`‚úÖ ${savedCount} respostas das caracter√≠sticas salvas no banco`);
    
    return NextResponse.json({
      success: true,
      message: `Caracter√≠sticas geradas com sucesso! ${savedCount} respostas v√°lidas salvas de ${respostas.length} geradas.`,
      data: {
        productId: numericProductId,
        productName: product.name,
        characteristicsGenerated: savedCount,
        totalCharacteristics: characteristics.length,
        totalResponsesGenerated: respostas.length,
        validResponses: respostasValidas.length,
        filteredResponses: respostas.length - respostasValidas.length,
        tokensUsed: responseData.usage?.total_tokens || 0,
        responseTime: responseTime,
        model: agent.model,
        qualityFilter: 'Aplicado - apenas respostas v√°lidas e espec√≠ficas foram salvas'
      }
    });

  } catch (error: any) {
    console.error('‚ùå Erro ao gerar caracter√≠sticas:', error);
    
    return NextResponse.json({
      success: false,
      message: 'Erro interno do servidor ao gerar caracter√≠sticas',
      error: error.message
    }, { status: 500 });
  }
}
