import { NextRequest, NextResponse } from 'next/server';
import { checkBuildEnvironment } from '@/lib/build-check';
import { executeQuery } from '@/lib/database';

export async function GET(request: NextRequest) {
  try {
    // Evitar execu√ß√£o durante o build do Next.js
    if (checkBuildEnvironment()) {
      return NextResponse.json({ error: 'API n√£o dispon√≠vel durante build' }, { status: 503 });
    }

    console.log('üîç Buscando caracter√≠sticas...');

    const caracteristicas = await executeQuery(`
      SELECT 
        id,
        caracteristica,
        pergunta_ia,
        valores_possiveis,
        is_active,
        categorias,
        created_at,
        updated_at
      FROM caracteristicas
      ORDER BY caracteristica ASC
    `);

    console.log(`‚úÖ ${caracteristicas?.length || 0} caracter√≠sticas encontradas`);

    return NextResponse.json({
      success: true,
      caracteristicas: caracteristicas || []
    });

  } catch (error: any) {
    console.error('‚ùå Erro ao buscar caracter√≠sticas:', error);
    return NextResponse.json({
      success: false,
      message: 'Erro ao buscar caracter√≠sticas',
      error: error.message
    }, { status: 500 });
  }
}

export async function POST(request: NextRequest) {
  try {
    // Evitar execu√ß√£o durante o build do Next.js
    if (checkBuildEnvironment()) {
      return NextResponse.json({ error: 'API n√£o dispon√≠vel durante build' }, { status: 503 });
    }

    const body = await request.json();
    const { caracteristica, pergunta_ia, valores_possiveis, is_active = true, categorias } = body;

    console.log('‚ûï Criando nova caracter√≠stica:', { caracteristica });

    // Validar campos obrigat√≥rios
    if (!caracteristica || !pergunta_ia) {
      return NextResponse.json({
        success: false,
        message: 'Caracter√≠stica e pergunta s√£o obrigat√≥rios'
      }, { status: 400 });
    }

    // Inserir nova caracter√≠stica
    const result = await executeQuery(`
      INSERT INTO caracteristicas (caracteristica, pergunta_ia, valores_possiveis, is_active, categorias, created_at, updated_at)
      VALUES (?, ?, ?, ?, ?, NOW(), NOW())
    `, [caracteristica, pergunta_ia, valores_possiveis || null, is_active, categorias || null]);

    console.log('‚úÖ Caracter√≠stica criada com sucesso');

    return NextResponse.json({
      success: true,
      message: 'Caracter√≠stica criada com sucesso',
      id: (result as any).insertId
    });

  } catch (error: any) {
    console.error('‚ùå Erro ao criar caracter√≠stica:', error);
    
    // Verificar se √© erro de duplicata
    if (error.message?.includes('unique_caracteristica')) {
      return NextResponse.json({
        success: false,
        message: 'J√° existe uma caracter√≠stica com este nome'
      }, { status: 400 });
    }

    return NextResponse.json({
      success: false,
      message: 'Erro ao criar caracter√≠stica',
      error: error.message
    }, { status: 500 });
  }
}
