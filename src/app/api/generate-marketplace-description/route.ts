import { NextRequest, NextResponse } from 'next/server';
import { executeQuery } from '@/lib/database';

// Fun√ß√£o para verificar se t√≠tulo j√° existe no banco
async function checkTitleExists(title: string, productId: number): Promise<boolean> {
  try {
    const checkQuery = `
      SELECT COUNT(*) as count 
      FROM meli 
      WHERE title = ? AND product_id != ?
    `;
    const result = await executeQuery(checkQuery, [title, productId]);
    return (result[0] as any).count > 0;
  } catch (error) {
    console.log('‚ö†Ô∏è Erro ao verificar duplicata de t√≠tulo:', error);
    return false;
  }
}

// Fun√ß√£o para gerar t√≠tulo √∫nico
async function generateUniqueTitle(baseTitle: string, productId: number, maxAttempts: number = 5): Promise<string> {
  let title = baseTitle;
  let attempts = 0;
  
  while (attempts < maxAttempts) {
    const exists = await checkTitleExists(title, productId);
    if (!exists) {
      return title;
    }
    
    // Se t√≠tulo existe, adicionar sufixo num√©rico
    attempts++;
    title = `${baseTitle} ${attempts}`;
  }
  
  // Se n√£o conseguir gerar t√≠tulo √∫nico, retornar com timestamp
  return `${baseTitle} ${Date.now()}`;
}

export async function POST(request: NextRequest) {
  try {
    console.log('üîÑ Iniciando gera√ß√£o de descri√ß√£o do Marketplace...');
    
    let body;
    try {
      body = await request.json();
      console.log('üìù Body recebido:', body);
    } catch (parseError) {
      console.error('‚ùå Erro ao fazer parse do JSON:', parseError);
      return NextResponse.json({
        success: false,
        message: 'Erro ao processar dados da requisi√ß√£o'
      }, { status: 400 });
    }
    
    const { productId, forceRegenerate = false } = body;

    if (!productId) {
      console.log('‚ùå productId n√£o fornecido');
      return NextResponse.json({
        success: false,
        message: 'productId √© obrigat√≥rio'
      }, { status: 400 });
    }

    // Validar se productId √© um n√∫mero
    const numericProductId = parseInt(productId);
    if (isNaN(numericProductId)) {
      console.log('‚ùå productId inv√°lido:', productId);
      return NextResponse.json({
        success: false,
        message: 'productId deve ser um n√∫mero v√°lido'
      }, { status: 400 });
    }

    console.log('üîÑ Gerando descri√ß√£o do Marketplace para produto ID:', productId);

    // 1. Buscar dados completos do produto
    console.log('üîç Buscando dados do produto...');
    let products;
    try {
      const productQuery = `
        SELECT 
          p.*,
          b.name as brand_name,
          c.name as category_name
        FROM products p
        LEFT JOIN brands b ON p.brand_id = b.id
        LEFT JOIN categories c ON p.category_id = c.id
        WHERE p.id = ?
      `;

      products = await executeQuery(productQuery, [numericProductId]);
      console.log('üìä Resultado da busca do produto:', products?.length || 0, 'registros');
    } catch (dbError) {
      console.error('‚ùå Erro ao buscar produto no banco:', dbError);
      return NextResponse.json({
        success: false,
        message: 'Erro ao buscar produto no banco de dados'
      }, { status: 500 });
    }
    
    if (!products || products.length === 0) {
      console.log('‚ùå Produto n√£o encontrado');
      return NextResponse.json({
        success: false,
        message: 'Produto n√£o encontrado'
      }, { status: 404 });
    }

    const product = products[0];
    console.log('üì¶ Produto encontrado:', product.name);

    // 2. Buscar an√°lise de imagens mais recente
    let imageAnalysis = null;
    try {
      console.log('üîç Buscando an√°lise de imagens...');
      const analysisQuery = `
        SELECT 
          ial.*,
          a.name as agent_name
        FROM image_analysis_logs ial
        LEFT JOIN agents a ON ial.agent_id = a.id
        WHERE ial.product_id = ?
        ORDER BY ial.created_at DESC
        LIMIT 1
      `;
      
      const analyses = await executeQuery(analysisQuery, [numericProductId]);
      console.log('üìä An√°lises encontradas:', analyses?.length || 0);
      
      if (analyses && analyses.length > 0) {
        imageAnalysis = analyses[0];
        console.log('üñºÔ∏è An√°lise de imagem encontrada');
      } else {
        console.log('üñºÔ∏è Nenhuma an√°lise de imagem encontrada');
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Erro ao buscar an√°lise de imagens:', error);
      // N√£o falhar a opera√ß√£o por causa da an√°lise de imagens
      imageAnalysis = null;
    }

    // 3. Verificar se j√° existe descri√ß√£o (se n√£o for regenera√ß√£o for√ßada)
    if (!forceRegenerate) {
      console.log('üîç Verificando se j√° existe descri√ß√£o...');
      try {
        const existingQuery = `SELECT * FROM meli WHERE product_id = ?`;
        const existing = await executeQuery(existingQuery, [numericProductId]);
        console.log('üìä Descri√ß√µes existentes:', existing?.length || 0);
        
        if (existing && existing.length > 0) {
          console.log('‚úÖ Descri√ß√£o j√° existe, retornando...');
          return NextResponse.json({
            success: true,
            data: existing[0],
            message: 'Descri√ß√£o j√° existe'
          });
        }
      } catch (error) {
        console.log('‚ö†Ô∏è Erro ao verificar descri√ß√µes existentes:', error);
        // Continuar com a gera√ß√£o mesmo se houver erro na verifica√ß√£o
      }
    }

    // 4. Gerar descri√ß√£o usando OpenAI
    console.log('ü§ñ Chamando OpenAI...');
    const openaiResponse = await generateMeliDescriptionWithOpenAI(product, imageAnalysis, numericProductId);
    console.log('ü§ñ Resposta da OpenAI:', openaiResponse.success ? 'Sucesso' : 'Erro');
    
    if (!openaiResponse.success) {
      console.log('‚ùå Erro na OpenAI:', openaiResponse.error);
      return NextResponse.json({
        success: false,
        message: openaiResponse.error || 'Erro ao gerar descri√ß√£o com IA'
      }, { status: 500 });
    }

    const { title, description, clothing_type, sleeve_type, gender, color, modelo, seller_sku, wedge_shape, is_sportive, main_color, item_condition, brand, tokensUsed } = openaiResponse.data || {};
    console.log('üìù Dados gerados:', { title: title?.substring(0, 50) + '...', description: description?.substring(0, 50) + '...' });

    // 5. Salvar no banco de dados
    console.log('üíæ Salvando no banco de dados...');
    let saveResult;
    try {
      saveResult = await saveMeliDescription({
        productId: numericProductId,
        title,
        description,
        clothing_type,
        sleeve_type,
        gender,
        color,
        modelo,
        seller_sku,
        wedge_shape,
        is_sportive,
        main_color,
        item_condition,
        brand,
        tokensUsed,
        agentUsed: 'Agente Marketplace',
        modelUsed: 'gpt-4o-mini'
      });
      
      console.log('üíæ Resultado do salvamento:', saveResult.success ? 'Sucesso' : 'Erro');
      
      if (!saveResult.success) {
        console.log('‚ùå Erro ao salvar:', saveResult.message);
        return NextResponse.json({
          success: false,
          message: 'Erro ao salvar descri√ß√£o no banco de dados'
        }, { status: 500 });
      }
    } catch (saveError) {
      console.error('‚ùå Erro ao salvar no banco:', saveError);
      return NextResponse.json({
        success: false,
        message: 'Erro ao salvar descri√ß√£o no banco de dados'
      }, { status: 500 });
    }

    console.log('‚úÖ Descri√ß√£o do Marketplace gerada com sucesso!');
    return NextResponse.json({
      success: true,
      data: {
        ...saveResult.data,
        title,
        description,
        clothing_type,
        sleeve_type,
        gender,
        color,
        modelo,
        seller_sku,
        wedge_shape,
        is_sportive,
        main_color,
        item_condition,
        brand,
        tokensUsed
      }
    });

  } catch (error: any) {
    console.error('‚ùå Erro ao gerar descri√ß√£o do Marketplace:', error);
    
    return NextResponse.json({
      success: false,
      message: 'Erro interno do servidor ao gerar descri√ß√£o',
      error: error.message
    }, { status: 500 });
  }
}

async function generateMeliDescriptionWithOpenAI(product: any, imageAnalysis: any, productId: number) {
  try {
    console.log('ü§ñ Iniciando gera√ß√£o com OpenAI...');
    console.log('üì¶ Produto:', product.name);
    console.log('üñºÔ∏è An√°lise de imagem:', imageAnalysis ? 'Dispon√≠vel' : 'N√£o dispon√≠vel');
    
    // Buscar chave da OpenAI das configura√ß√µes do banco
    console.log('üîç Buscando chave da OpenAI...');
    let settings;
    try {
      settings = await executeQuery(`
        SELECT config_value 
        FROM system_config 
        WHERE config_key = 'openai_api_key'
      `);
      console.log('üìä Configura√ß√µes encontradas:', settings?.length || 0);
    } catch (dbError) {
      console.error('‚ùå Erro ao buscar configura√ß√£o da OpenAI:', dbError);
      throw new Error('Erro ao acessar configura√ß√µes do banco de dados');
    }

    if (!settings || settings.length === 0) {
      console.log('‚ö†Ô∏è Chave da OpenAI n√£o configurada no banco');
      throw new Error('Chave da API OpenAI n√£o configurada. Configure em Configura√ß√µes > IA.');
    }

    const openaiApiKey = settings[0].config_value;
    console.log('üîë Chave da API OpenAI:', openaiApiKey ? 'Configurada' : 'N√ÉO CONFIGURADA');
    
    if (!openaiApiKey || openaiApiKey.trim() === '') {
      console.log('‚ö†Ô∏è Chave da OpenAI est√° vazia');
      throw new Error('Chave da API OpenAI est√° vazia. Configure em Configura√ß√µes > IA.');
    }

    console.log('‚úÖ Chave da OpenAI encontrada, continuando...');

    // Construir prompt para o Marketplace
    const systemPrompt = `Voc√™ √© um especialista em e-commerce e marketing digital, focado especificamente no Marketplace. Sua tarefa √© criar t√≠tulos e descri√ß√µes otimizadas para produtos de moda e vestu√°rio que maximizem a visibilidade e convers√£o no Marketplace.

REGRAS IMPORTANTES:
1. T√≠tulo deve ter M√ÅXIMO 60 caracteres (limite obrigat√≥rio do Marketplace)
2. Descri√ß√£o deve ter M√çNIMO 350 palavras, estruturada e detalhada
3. Use palavras-chave relevantes para SEO
4. Inclua informa√ß√µes t√©cnicas e de qualidade
5. Seja persuasivo mas honesto
6. Foque nos benef√≠cios para o cliente
7. Use linguagem clara e direta
8. Estruture a descri√ß√£o com se√ß√µes organizadas
9. USE TAGS HTML B√ÅSICAS para formata√ß√£o: <br> para quebras de linha, <b> para negrito, <li> para listas
10. OBRIGAT√ìRIO: A descri√ß√£o deve ter pelo menos 350 palavras para garantir qualidade e SEO
11. NUNCA AFIRME materiais espec√≠ficos (como "100% algod√£o", "poli√©ster", etc.) sem ter certeza absoluta
12. Use termos gen√©ricos como "material de qualidade", "tecido selecionado", "composi√ß√£o premium" quando n√£o souber o material exato

ESTRUTURA DA DESCRI√á√ÉO (M√çNIMO 350 PALAVRAS):
- Par√°grafo introdut√≥rio detalhado sobre o produto (50-80 palavras)
- Informa√ß√µes sobre a marca e qualidade (40-60 palavras)
- Detalhes t√©cnicos e materiais (60-80 palavras)
- Benef√≠cios e caracter√≠sticas (50-70 palavras)
- Se√ß√£o "Destaques do produto" com 5-7 bullet points (60-80 palavras)
- Se√ß√£o "Material e cuidados" detalhada (40-60 palavras)
- Se√ß√£o "Por que escolher" com 4-5 vantagens (50-70 palavras)
- Se√ß√£o "FAQ - Perguntas frequentes" com 5-6 perguntas completas (80-100 palavras)
- Call-to-action final (20-30 palavras)

FORMATO DE RESPOSTA (JSON):
{
  "title": "t√≠tulo otimizado",
  "description": "descri√ß√£o completa estruturada",
  "clothing_type": "Tipo de roupa (ex: Camiseta, Camiseta Polo, Moletom, etc.)",
  "sleeve_type": "Tipo de manga (Curta, Longa, 3/4, Sem Mangas, Tomara que caia)",
  "gender": "G√™nero (Masculino, Feminino, Meninos, Meninas, Beb√™s, Sem g√™nero, Sem g√™nero infantil)",
  "color": "Cor principal do produto (ex: Azul, Vermelho, Preto, Branco, etc.)",
  "modelo": "5 varia√ß√µes do nome do produto separadas por v√≠rgula (ex: Camiseta B√°sica, Camiseta Casual, Camisa Dia a Dia, Camisa Lisa, Camisa para Trabalhar)",
  "seller_sku": "SKU do vendedor (usar o ref_id do produto)",
  "wedge_shape": "Forma de caimento (Oversize, Larga, Slim, Reta)",
  "is_sportive": "√â esportiva (Sim, N√£o)",
  "main_color": "Cor principal do produto (ex: Azul, Vermelho, Preto, Branco, etc.)",
  "item_condition": "Condi√ß√£o do item (Novo, Usado, Recondicionado)",
  "brand": "Nome da marca do produto"
}`;

    const userPrompt = `Crie uma descri√ß√£o otimizada para o Marketplace para este produto:

PRODUTO ORIGINAL: ${product.name}
REF_ID: ${product.ref_id || 'N/A'}
MARCA: ${product.brand_name || 'N/A'}
CATEGORIA: ${product.category_name || 'N/A'}
DESCRI√á√ÉO ATUAL: ${product.description || 'N/A'}
T√çTULO ATUAL: ${product.title || 'N/A'}

${imageAnalysis ? `
AN√ÅLISE T√âCNICA DAS IMAGENS:
${imageAnalysis.contextual_analysis}
` : ''}

INSTRU√á√ïES CR√çTICAS: 
- Crie um NOVO T√çTULO otimizado (n√£o use o nome original do produto)
- OBRIGAT√ìRIO: O t√≠tulo DEVE sempre incluir: CATEGORIA + MARCA + G√äNERO + COR
- OBRIGAT√ìRIO: O t√≠tulo DEVE sempre incluir o g√™nero: "Masculino", "Feminino" ou "Unissex"
- OBRIGAT√ìRIO: O t√≠tulo DEVE sempre incluir a marca do produto
- OBRIGAT√ìRIO: O t√≠tulo DEVE sempre incluir a categoria do produto
- OBRIGAT√ìRIO: O t√≠tulo DEVE sempre incluir a cor detectada
- Na descri√ß√£o, use EXCLUSIVAMENTE o NOVO T√çTULO que voc√™ criou, NUNCA o nome original
- O novo t√≠tulo deve ser mais atrativo e otimizado para SEO
- TODA a descri√ß√£o deve referenciar o produto pelo novo t√≠tulo otimizado

ESTRUTURA OBRIGAT√ìRIA DA DESCRI√á√ÉO:
1. Par√°grafo introdut√≥rio sobre o produto (use o novo t√≠tulo)
2. Informa√ß√µes sobre a marca e qualidade
3. Detalhes t√©cnicos e materiais
4. Benef√≠cios e caracter√≠sticas
5. Se√ß√£o "Destaques do produto" com bullet points
6. Se√ß√£o "Material e cuidados"
7. Se√ß√£o "Por que escolher" com vantagens
8. Se√ß√£o "FAQ - Perguntas frequentes" com 4-5 perguntas
9. Call-to-action final

EXEMPLOS DE COMO MELHORAR O CONTE√öDO (APENAS SUGEST√ïES):

Exemplo 1 - T√≠tulos com g√™nero obrigat√≥rio:
- Para produtos masculinos: "[Nome do Produto] Masculino - [Caracter√≠sticas]"
- Para produtos femininos: "[Nome do Produto] Feminino - [Caracter√≠sticas]"  
- Para produtos unissex: "[Nome do Produto] Unissex - [Caracter√≠sticas]"

Exemplo 2 - Introdu√ß√£o mais envolvente:
"Descubra o <b>[Novo T√≠tulo]</b>, uma pe√ßa essencial para quem busca [benef√≠cio principal]. Imagine-se [situa√ß√£o de uso espec√≠fica] com total conforto e estilo. Este produto foi pensado para [p√∫blico-alvo] que valoriza [caracter√≠sticas importantes]."

Exemplo 2 - Storytelling da marca:
"A <b>[Marca]</b> nasceu da paix√£o por [hist√≥ria da marca]. Cada produto carrega nossa miss√£o de [valores da marca]. Quando voc√™ escolhe [Marca], est√° escolhendo [benef√≠cio da escolha da marca]."

Exemplo 3 - Destaques mais persuasivos:
"<b>O que torna este produto especial:</b><br>
<li><b>Design inteligente:</b> [explica√ß√£o detalhada do design]</li>
<li><b>Conforto garantido:</b> [explica√ß√£o do conforto]</li>
<li><b>Durabilidade excepcional:</b> [explica√ß√£o da durabilidade]</li>
<li><b>Versatilidade √∫nica:</b> [explica√ß√£o da versatilidade]</li>"

Exemplo 3b - Como falar sobre materiais sem afirmar:
"<b>Qualidade e conforto:</b><br>
<li><b>Material selecionado:</b> Tecido de alta qualidade que oferece [benef√≠cios]</li>
<li><b>Composi√ß√£o premium:</b> Material cuidadosamente escolhido para [prop√≥sito]</li>
<li><b>Acabamento refinado:</b> Detalhes que garantem [benef√≠cios espec√≠ficos]</li>"

Exemplo 4 - FAQ mais humanizado:
"<b>D√∫vidas frequentes:</b><br>
<b>Este produto √© adequado para [situa√ß√£o espec√≠fica]?</b><br>
Sim! O [Novo T√≠tulo] foi desenvolvido pensando em [situa√ß√£o espec√≠fica]. [Explica√ß√£o detalhada com benef√≠cios].<br><br>

<b>Como posso ter certeza da qualidade?</b><br>
Nossa garantia de [tempo] cobre [cobertura da garantia]. Al√©m disso, [argumentos de qualidade adicionais]."

Exemplo 5 - Call-to-action mais persuasivo:
"N√£o perca a oportunidade de ter o <b>[Novo T√≠tulo]</b> em seu guarda-roupa. [Benef√≠cio imediato da compra]. [Urg√™ncia ou escassez]. Garanta o seu agora e [benef√≠cio adicional da compra]!"

INSTRU√á√ïES DE FORMATA√á√ÉO HTML:
- Use <br> para quebras de linha (n√£o use \n)
- Use <b>texto</b> para destacar palavras importantes
- Use <li>item</li> para criar listas (n√£o use ‚Ä¢ ou -)
- Use <br><br> para separar par√°grafos
- Mantenha o HTML simples e limpo

DETEC√á√ÉO DE TIPO DE ROUPA:
- Analise o nome do produto para identificar o tipo de roupa
- Se cont√©m "Polo" ou "polo" ‚Üí "Camiseta Polo"
- Se cont√©m "Camiseta" mas n√£o "Polo" ‚Üí "Camiseta"
- Se cont√©m "Moletom" ‚Üí "Moletom"
- Se cont√©m "Cal√ßa" ‚Üí "Cal√ßa"
- Se cont√©m "Short" ‚Üí "Short"
- Se cont√©m "Jaqueta" ‚Üí "Jaqueta"
- Se cont√©m "Blusa" ‚Üí "Blusa"
- Se cont√©m "Vestido" ‚Üí "Vestido"
- Se cont√©m "Saia" ‚Üí "Saia"
- Se n√£o identificar, use o tipo mais gen√©rico baseado no contexto

DETEC√á√ÉO DE TIPO DE MANGA:
- Analise o nome do produto e descri√ß√£o para identificar o tipo de manga
- Se cont√©m "Manga Curta", "Curta", "Regata" ‚Üí "Curta"
- Se cont√©m "Manga Longa", "Longa", "Comprida" ‚Üí "Longa"
- Se cont√©m "3/4", "Tr√™s Quartos", "Meia Manga" ‚Üí "3/4"
- Se cont√©m "Sem Manga", "Sem Mangas", "Regata", "Tank Top" ‚Üí "Sem Mangas"
- Se cont√©m "Tomara que Caia", "Tomara que caia", "Off Shoulder" ‚Üí "Tomara que caia"
- Se n√£o identificar, use "Curta" como padr√£o para camisetas e "Longa" para blusas/jaquetas

DETEC√á√ÉO DE G√äNERO:
- Analise o nome do produto e descri√ß√£o para identificar o g√™nero
- Se cont√©m "Masculina", "Masculino", "Homem", "Men" ‚Üí "Masculino"
- Se cont√©m "Feminina", "Feminino", "Mulher", "Woman", "Lady" ‚Üí "Feminino"
- Se cont√©m "Meninos", "Boy", "Boys" ‚Üí "Meninos"
- Se cont√©m "Meninas", "Girl", "Girls" ‚Üí "Meninas"
- Se cont√©m "Beb√™", "Beb√™s", "Baby", "Infantil" (para beb√™s) ‚Üí "Beb√™s"
- Se cont√©m "Unissex", "Uni", "Neutro" ‚Üí "Sem g√™nero"
- Se cont√©m "Infantil" (para crian√ßas) ‚Üí "Sem g√™nero infantil"
- Se n√£o identificar, use "Sem g√™nero" como padr√£o

DETEC√á√ÉO DE COR:
- Analise o nome do produto e descri√ß√£o para identificar a cor principal
- Procure por palavras como: Azul, Vermelho, Preto, Branco, Verde, Amarelo, Rosa, Roxo, Cinza, Marrom, Bege, etc.
- Se houver m√∫ltiplas cores, escolha a cor predominante
- Se n√£o identificar cor espec√≠fica, use "Multicolorido" ou a cor mais comum mencionada
- CR√çTICO: A cor detectada DEVE aparecer no t√≠tulo do produto
- A cor deve ser uma palavra simples e clara (ex: "Azul", "Preto", "Rosa")

ESTRUTURA OBRIGAT√ìRIA DO T√çTULO:
- O t√≠tulo DEVE OBRIGATORIAMENTE incluir: CATEGORIA + MARCA + G√äNERO + COR
- LIMITE CR√çTICO: M√ÅXIMO 60 caracteres (contar cada letra, espa√ßo e s√≠mbolo)
- Formato: "[Nome do Produto] [Marca] [Categoria] [G√™nero] [Cor] - [Caracter√≠sticas]"
- Exemplos (todos com menos de 60 caracteres):
  * "Camiseta Nike Masculino Azul - Conforto" (42 caracteres)
  * "Blusa Zara Feminino Rosa - Elegante" (35 caracteres)
  * "Moletom Adidas Unissex Preto - Casual" (37 caracteres)
- OBRIGAT√ìRIO: Sempre incluir a marca do produto no t√≠tulo
- OBRIGAT√ìRIO: Sempre incluir a categoria do produto no t√≠tulo
- OBRIGAT√ìRIO: Sempre incluir o g√™nero detectado: "Masculino", "Feminino" ou "Unissex"
- OBRIGAT√ìRIO: Sempre incluir a cor detectada no t√≠tulo
- OBRIGAT√ìRIO: T√≠tulo deve ser √öNICO e n√£o duplicar t√≠tulos existentes
- O g√™nero no t√≠tulo deve corresponder exatamente ao campo "gender" detectado
- Se o g√™nero for "Masculino" ‚Üí t√≠tulo deve conter "Masculino"
- Se o g√™nero for "Feminino" ‚Üí t√≠tulo deve conter "Feminino"
- Se o g√™nero for "Sem g√™nero" ‚Üí t√≠tulo deve conter "Unissex"

GERA√á√ÉO DE VARIA√á√ïES DO NOME (CAMPO MODELO):
- Crie EXATAMENTE 5 varia√ß√µes do nome do produto separadas por v√≠rgula
- Estas varia√ß√µes N√ÉO devem aparecer no t√≠tulo ou na descri√ß√£o
- Use diferentes formas de chamar o mesmo produto
- Inclua varia√ß√µes que os clientes usariam para buscar o produto
- Exemplos de varia√ß√µes:
  * Para "Camiseta B√°sica": "Camiseta Casual, Camisa Dia a Dia, Camisa Lisa, Camisa para Trabalhar, Camiseta Simples"
  * Para "Blusa Elegante": "Blusa Social, Blusa para Festa, Blusa Feminina, Blusa Chique, Blusa Sofisticada"
  * Para "Moletom Confort√°vel": "Moletom Casual, Moletom para Casa, Moletom Quentinho, Moletom Relax, Moletom B√°sico"
- Formato: "Varia√ß√£o 1, Varia√ß√£o 2, Varia√ß√£o 3, Varia√ß√£o 4, Varia√ß√£o 5"
- Exemplo: "Camiseta B√°sica, Camiseta Casual, Camisa Dia a Dia, Camisa Lisa, Camisa para Trabalhar"

DETEC√á√ÉO DE FORMA DE CAIMENTO (CAMPO WEDGE_SHAPE):
- Analise o nome do produto e descri√ß√£o para identificar a forma de caimento
- Se cont√©m "Oversize", "Oversized", "Largo", "Folgado" ‚Üí "Oversize"
- Se cont√©m "Larga", "Wide", "Amplo" ‚Üí "Larga"
- Se cont√©m "Slim", "Ajustado", "Justo", "Colado" ‚Üí "Slim"
- Se cont√©m "Reta", "Reto", "Straight", "Cl√°ssico" ‚Üí "Reta"
- Se n√£o identificar, use "Reta" como padr√£o

DETEC√á√ÉO DE PRODUTO ESPORTIVO (CAMPO IS_SPORTIVE):
- Analise o nome do produto e descri√ß√£o para identificar se √© esportivo
- Se cont√©m "Esportiva", "Esportivo", "Sport", "Atl√©tica", "Academia", "Treino", "Fitness", "Corrida", "Ciclismo" ‚Üí "Sim"
- Se cont√©m "Casual", "Social", "Elegante", "Formal", "Trabalho", "Escrit√≥rio" ‚Üí "N√£o"
- Se n√£o identificar, use "N√£o" como padr√£o

DETEC√á√ÉO DE COR PRINCIPAL (CAMPO MAIN_COLOR):
- Analise o nome do produto e descri√ß√£o para identificar a cor principal
- Use a mesma l√≥gica do campo "color" existente
- Se n√£o identificar, use "Multicolorido"

DETEC√á√ÉO DE CONDI√á√ÉO DO ITEM (CAMPO ITEM_CONDITION):
- Para produtos novos (padr√£o): "Novo"
- Se cont√©m "Usado", "Seminovo", "Recondicionado" ‚Üí usar a condi√ß√£o espec√≠fica
- Padr√£o: "Novo"

DETEC√á√ÉO DE MARCA (CAMPO BRAND):
- Use o nome da marca do produto (brand_name)
- Se n√£o dispon√≠vel, use "Marca Gen√©rica"

CRIATIVIDADE E FLEXIBILIDADE:
- Use os exemplos acima como inspira√ß√£o, n√£o como regras r√≠gidas
- Seja criativo na estrutura e abordagem
- Adapte o tom e estilo ao produto espec√≠fico
- Varie a linguagem para evitar repeti√ß√£o
- Crie conex√£o emocional com o cliente
- Use storytelling quando apropriado
- Seja aut√™ntico e persuasivo

CUIDADOS COM INFORMA√á√ïES T√âCNICAS:
- NUNCA especifique materiais exatos (algod√£o, poli√©ster, etc.) sem certeza
- Use termos gen√©ricos: "material de qualidade", "tecido selecionado", "composi√ß√£o premium"
- Foque nos BENEF√çCIOS do material, n√£o na composi√ß√£o exata
- Se mencionar cuidados, seja gen√©rico: "siga as instru√ß√µes de lavagem do fabricante"
- Evite especifica√ß√µes t√©cnicas que n√£o pode confirmar

LEMBRE-SE: A descri√ß√£o deve usar APENAS o novo t√≠tulo otimizado, NUNCA o nome original do produto.

Retorne APENAS o JSON com as informa√ß√µes solicitadas.`;

    console.log('üåê Chamando API da OpenAI...');
    let response;
    try {
      response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${openaiApiKey}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: 'gpt-4o-mini',
          messages: [
            { role: 'system', content: systemPrompt },
            { role: 'user', content: userPrompt }
          ],
          max_tokens: 3000,
          temperature: 0.7,
          response_format: { type: 'json_object' }
        }),
      });

      if (!response.ok) {
        const errorData = await response.text();
        console.error('‚ùå Erro na API OpenAI:', response.status, errorData);
        throw new Error(`Erro na API OpenAI: ${response.status} - ${errorData}`);
      }
    } catch (fetchError) {
      console.error('‚ùå Erro na requisi√ß√£o para OpenAI:', fetchError);
      const errorMessage = fetchError instanceof Error ? fetchError.message : 'Erro desconhecido';
      throw new Error(`Erro na requisi√ß√£o para OpenAI: ${errorMessage}`);
    }

    let data;
    try {
      data = await response.json();
      console.log('‚úÖ Resposta da OpenAI recebida');
    } catch (jsonError) {
      console.error('‚ùå Erro ao fazer parse da resposta JSON:', jsonError);
      throw new Error('Resposta inv√°lida da OpenAI');
    }

    if (!data.choices || !data.choices[0] || !data.choices[0].message) {
      console.error('‚ùå Estrutura de resposta inv√°lida:', data);
      throw new Error('Resposta inv√°lida da OpenAI');
    }

    const content = data.choices[0].message.content;
    console.log('üìù Conte√∫do recebido:', content?.substring(0, 100) + '...');

    if (!content) {
      console.error('‚ùå Conte√∫do vazio na resposta da OpenAI');
      throw new Error('Resposta vazia da OpenAI');
    }

    let parsedContent;
    try {
      parsedContent = JSON.parse(content);
    } catch (parseError) {
      console.error('‚ùå Erro ao fazer parse do JSON:', parseError);
      console.error('‚ùå Conte√∫do que causou erro:', content);
      throw new Error('Resposta da OpenAI n√£o √© um JSON v√°lido');
    }

    // Garantir que o t√≠tulo tenha no m√°ximo 60 caracteres
    let finalTitle = parsedContent.title || 'T√≠tulo n√£o gerado';
    if (finalTitle.length > 60) {
      finalTitle = finalTitle.substring(0, 60);
      console.log('‚ö†Ô∏è T√≠tulo truncado para 60 caracteres:', finalTitle);
    }

    // Gerar t√≠tulo √∫nico
    let uniqueTitle;
    try {
      uniqueTitle = await generateUniqueTitle(finalTitle, productId);
      console.log('üîç T√≠tulo √∫nico gerado:', uniqueTitle);
    } catch (titleError) {
      console.error('‚ùå Erro ao gerar t√≠tulo √∫nico:', titleError);
      // Usar t√≠tulo original se houver erro na verifica√ß√£o de duplicatas
      uniqueTitle = finalTitle;
    }

    return {
      success: true,
      data: {
        title: uniqueTitle,
        description: parsedContent.description || 'Descri√ß√£o n√£o gerada',
        clothing_type: parsedContent.clothing_type || 'Produto de Vestu√°rio',
        sleeve_type: parsedContent.sleeve_type || 'Curta',
        gender: parsedContent.gender || 'Sem g√™nero',
        color: parsedContent.color || 'Multicolorido',
        modelo: parsedContent.modelo || 'Produto B√°sico, Produto Casual, Produto Simples, Produto Essencial, Produto Vers√°til',
        seller_sku: parsedContent.seller_sku || product.ref_id || 'N/A',
        wedge_shape: parsedContent.wedge_shape || 'Reta',
        is_sportive: parsedContent.is_sportive || 'N√£o',
        main_color: parsedContent.main_color || parsedContent.color || 'Multicolorido',
        item_condition: parsedContent.item_condition || 'Novo',
        brand: parsedContent.brand || product.brand_name || 'Marca Gen√©rica',
        tokensUsed: data.usage?.total_tokens || 0
      }
    };

  } catch (error: any) {
    console.error('‚ùå Erro na gera√ß√£o com OpenAI:', error);
    return {
      success: false,
      error: error.message
    };
  }
}

// Fun√ß√£o para salvar descri√ß√£o do Marketplace diretamente no banco
async function saveMeliDescription(data: {
  productId: number;
  title: string;
  description: string;
  clothing_type?: string;
  sleeve_type?: string;
  gender?: string;
  color?: string;
  modelo?: string;
  seller_sku?: string;
  wedge_shape?: string;
  is_sportive?: string;
  main_color?: string;
  item_condition?: string;
  brand?: string;
  agentUsed?: string;
  modelUsed?: string;
  tokensUsed?: number;
}) {
  try {
    const { 
      productId, 
      title, 
      description, 
      clothing_type,
      sleeve_type,
      gender,
      color,
      modelo,
      seller_sku,
      wedge_shape,
      is_sportive,
      main_color,
      item_condition,
      brand,
      agentUsed,
      modelUsed,
      tokensUsed
    } = data;

    // Verificar se a tabela meli existe, se n√£o, criar
    const createTableQuery = `
      CREATE TABLE IF NOT EXISTS meli (
        id INT AUTO_INCREMENT PRIMARY KEY,
        product_id INT NOT NULL,
        title VARCHAR(255) NOT NULL,
        description TEXT NOT NULL,
        clothing_type VARCHAR(100),
        sleeve_type VARCHAR(50),
        gender VARCHAR(50),
        color VARCHAR(100),
        modelo TEXT,
        seller_sku VARCHAR(255),
        wedge_shape VARCHAR(50),
        is_sportive VARCHAR(10),
        main_color VARCHAR(100),
        item_condition VARCHAR(50),
        brand VARCHAR(255),
        agent_used VARCHAR(100),
        model_used VARCHAR(100),
        tokens_used INT DEFAULT 0,
        is_active BOOLEAN DEFAULT true,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
        FOREIGN KEY (product_id) REFERENCES products(id) ON DELETE CASCADE,
        UNIQUE KEY unique_product_meli (product_id)
      )
    `;

    await executeQuery(createTableQuery, []);

    // Inserir ou atualizar descri√ß√£o
    const insertQuery = `
      INSERT INTO meli (
        product_id, title, description, clothing_type, sleeve_type, gender, color, modelo,
        seller_sku, wedge_shape, is_sportive, main_color, item_condition, brand,
        agent_used, model_used, tokens_used
      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
      ON DUPLICATE KEY UPDATE
        title = VALUES(title),
        description = VALUES(description),
        clothing_type = VALUES(clothing_type),
        sleeve_type = VALUES(sleeve_type),
        gender = VALUES(gender),
        color = VALUES(color),
        modelo = VALUES(modelo),
        seller_sku = VALUES(seller_sku),
        wedge_shape = VALUES(wedge_shape),
        is_sportive = VALUES(is_sportive),
        main_color = VALUES(main_color),
        item_condition = VALUES(item_condition),
        brand = VALUES(brand),
        agent_used = VALUES(agent_used),
        model_used = VALUES(model_used),
        tokens_used = VALUES(tokens_used),
        updated_at = CURRENT_TIMESTAMP,
        created_at = CASE 
          WHEN created_at IS NULL THEN CURRENT_TIMESTAMP 
          ELSE created_at 
        END
    `;

    const result = await executeQuery(insertQuery, [
      productId,
      title,
      description,
      clothing_type || null,
      sleeve_type || null,
      gender || null,
      color || null,
      modelo || null,
      seller_sku || null,
      wedge_shape || null,
      is_sportive || null,
      main_color || null,
      item_condition || null,
      brand || null,
      agentUsed || null,
      modelUsed || null,
      tokensUsed || 0
    ]);

    console.log('‚úÖ Descri√ß√£o do Marketplace salva para produto ID:', productId);

    return {
      success: true,
      data: {
        id: (result as any).insertId,
        productId,
        title,
        description
      }
    };

  } catch (error: any) {
    console.error('‚ùå Erro ao salvar descri√ß√£o do Marketplace:', error);
    
    return {
      success: false,
      message: 'Erro interno do servidor ao salvar descri√ß√£o',
      error: error.message
    };
  }
}