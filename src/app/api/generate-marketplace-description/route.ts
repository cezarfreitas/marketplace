import { NextRequest, NextResponse } from 'next/server';
import { checkBuildEnvironment } from '@/lib/build-check';
import { executeQuery } from '@/lib/database';

// Fun√ß√£o para calcular o custo da OpenAI baseado no modelo e tokens
function calculateOpenAICost(tokens: number, model: string): number {
  // Pre√ßos por 1K tokens (em USD) - atualizados para 2024
  const pricing: { [key: string]: { input: number; output: number } } = {
    'gpt-4o-mini': { input: 0.00015, output: 0.0006 }, // $0.15/$0.60 per 1M tokens
    'gpt-4o': { input: 0.005, output: 0.015 }, // $5/$15 per 1M tokens
    'gpt-4-turbo': { input: 0.01, output: 0.03 }, // $10/$30 per 1M tokens
    'gpt-3.5-turbo': { input: 0.0005, output: 0.0015 }, // $0.50/$1.50 per 1M tokens
  };

  const modelPricing = pricing[model] || pricing['gpt-4o-mini'];
  
  // Assumir 70% input tokens e 30% output tokens (aproxima√ß√£o)
  const inputTokens = Math.floor(tokens * 0.7);
  const outputTokens = Math.floor(tokens * 0.3);
  
  const inputCost = (inputTokens / 1000) * modelPricing.input;
  const outputCost = (outputTokens / 1000) * modelPricing.output;
  
  return inputCost + outputCost;
}

// Fun√ß√£o para gerar respostas das caracter√≠sticas usando agente espec√≠fico
async function generateCharacteristicsResponses(
  product: any,
  imageAnalysis: any,
  marketplaceDescription: any,
  productId: number,
  openaiApiKey: string
): Promise<{ success: boolean; data?: any[]; error?: string }> {
  try {
    console.log('ü§ñ Iniciando gera√ß√£o de respostas das caracter√≠sticas...');
    
    // Buscar caracter√≠sticas ativas
    const characteristicsQuery = `
      SELECT id, caracteristica, pergunta_ia, valores_possiveis
      FROM caracteristicas 
      WHERE is_active = 1
      ORDER BY caracteristica
    `;
    
    const characteristicsResult = await executeQuery(characteristicsQuery, []);
    const characteristics = characteristicsResult || [];
    
    if (!characteristics || characteristics.length === 0) {
      console.log('‚ö†Ô∏è Nenhuma caracter√≠stica ativa encontrada');
      return { success: true, data: [] };
    }
    
    console.log(`üìä Encontradas ${characteristics.length} caracter√≠sticas ativas`);
    console.log('üìã Caracter√≠sticas encontradas:', characteristics.map((c: any) => `${c.id}: ${c.caracteristica}`).join(', '));
    
    // Buscar agente de caracter√≠sticas
    console.log('üîç Buscando agente de caracter√≠sticas...');
    const agentQuery = `
      SELECT id, name, system_prompt, model, max_tokens, temperature
      FROM agents 
      WHERE name = 'Agente Caracter√≠sticas' AND is_active = 1
      LIMIT 1
    `;
    
    const agentResult = await executeQuery(agentQuery, []);
    const agent = agentResult && agentResult.length > 0 ? agentResult[0] : null;
    
    if (!agent) {
      console.log('‚ùå Agente de caracter√≠sticas n√£o encontrado');
      return { success: false, error: 'Agente de caracter√≠sticas n√£o encontrado' };
    }
    
    console.log(`ü§ñ Usando agente: ${agent.name} (ID: ${agent.id})`);
    
    // Construir prompt para o agente
    const systemPrompt = agent.system_prompt;

    const userPrompt = `Analise este produto e responda as perguntas das caracter√≠sticas:

=== INFORMA√á√ïES DO PRODUTO ===
Nome: ${product.name}
Ref ID: ${product.ref_id || 'N/A'}
Categoria: ${product.category || 'N/A'}

=== AN√ÅLISE DE IMAGEM ===
${imageAnalysis ? imageAnalysis.contextualizacao : 'N√£o dispon√≠vel'}

=== DESCRI√á√ÉO GERADA ===
T√≠tulo: ${marketplaceDescription.title}
Descri√ß√£o: ${marketplaceDescription.description}

=== PERGUNTAS DAS CARACTER√çSTICAS ===
${characteristics.map((char: any) => 
  `${char.id}. ${char.caracteristica}: ${char.pergunta_ia}
   Valores poss√≠veis: ${char.valores_possiveis || 'N/A'}`
).join('\n\n')}

Responda cada pergunta baseado nas informa√ß√µes fornecidas.`;

    console.log('üåê Chamando API da OpenAI para caracter√≠sticas (modo r√°pido)...');
    const startTime = Date.now();
    
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openaiApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini', // OTIMIZADO: Usar modelo mais r√°pido
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: userPrompt }
        ],
        max_tokens: 800, // OTIMIZADO: Reduzido de 1000 para 800
        temperature: 0.2, // OTIMIZADO: Reduzido de 0.3 para 0.2 para resposta mais r√°pida
        response_format: { type: 'json_object' },
        stream: false // OTIMIZADO: Garantir que n√£o seja streaming
      }),
    });

    if (!response.ok) {
      const errorData = await response.text();
      console.error('‚ùå Erro na API OpenAI para caracter√≠sticas:', response.status, errorData);
      throw new Error(`Erro na API OpenAI: ${response.status}`);
    }

    const responseData = await response.json();
    const endTime = Date.now();
    const responseTime = endTime - startTime;

    console.log('‚úÖ Resposta das caracter√≠sticas recebida');
    console.log(`‚è±Ô∏è Tempo de resposta: ${responseTime}ms`);

    const content = responseData.choices[0]?.message?.content;
    if (!content) {
      throw new Error('Resposta vazia da OpenAI');
    }

    console.log('üìÑ Conte√∫do bruto da resposta:', content);
    
    const parsedContent = JSON.parse(content);
    console.log('üìã Conte√∫do parseado:', JSON.stringify(parsedContent, null, 2));
    
    const respostas = parsedContent.respostas || [];

    console.log(`üìä Respostas geradas: ${respostas.length}`);
    console.log('üìã Respostas detalhadas:', JSON.stringify(respostas, null, 2));

    // Salvar respostas no banco
    for (const resposta of respostas) {
      console.log(`üíæ Salvando resposta para caracter√≠stica ${resposta.caracteristica}:`, resposta.resposta);
      const insertQuery = `
        INSERT INTO respostas_caracteristicas 
        (produto_id, caracteristica, resposta, tokens_usados, created_at, updated_at)
        VALUES (?, ?, ?, ?, NOW(), NOW())
        ON DUPLICATE KEY UPDATE
        resposta = VALUES(resposta),
        tokens_usados = VALUES(tokens_usados),
        updated_at = NOW()
      `;
      
      try {
        await executeQuery(insertQuery, [
          productId,
          resposta.caracteristica,
          resposta.resposta,
          responseData.usage?.total_tokens || 0
        ]);
        console.log(`‚úÖ Resposta salva para caracter√≠stica ${resposta.caracteristica}`);
      } catch (insertError) {
        console.error(`‚ùå Erro ao salvar resposta para caracter√≠stica ${resposta.caracteristica}:`, insertError);
      }
    }

    console.log('‚úÖ Respostas das caracter√≠sticas salvas no banco');
    
    return {
      success: true,
      data: respostas
    };

  } catch (error: any) {
    console.error('‚ùå Erro ao gerar respostas das caracter√≠sticas:', error);
    return {
      success: false,
      error: error.message
    };
  }
}

// Fun√ß√£o para truncar t√≠tulo mantendo palavras completas
function truncateTitleIntelligently(title: string, maxLength: number = 60): string {
  if (title.length <= maxLength) {
    return title;
  }
  
  // Truncar no √∫ltimo espa√ßo antes do limite
  const truncated = title.substring(0, maxLength);
  const lastSpaceIndex = truncated.lastIndexOf(' ');
  
  if (lastSpaceIndex > 0) {
    return truncated.substring(0, lastSpaceIndex);
  }
  
  // Se n√£o h√° espa√ßo, truncar no limite
  return truncated;
}

// Fun√ß√£o para verificar se t√≠tulo j√° existe no banco
async function checkTitleExists(title: string, productId: number): Promise<boolean> {
  try {
    const checkQuery = `
      SELECT COUNT(*) as count 
      FROM marketplace 
      WHERE title = ? AND product_id != ?
    `;
    const result = await executeQuery(checkQuery, [title, productId]);
    return (result[0] as any).count > 0;
  } catch (error) {
    console.log('‚ö†Ô∏è Erro ao verificar duplicata de t√≠tulo:', error);
    return false;
  }
}

// Fun√ß√£o para gerar t√≠tulo √∫nico com regenera√ß√£o via IA
async function generateUniqueTitleWithAI(
  product: any, 
  imageAnalysis: any, 
  productId: number, 
  skus: any[], 
  specifications: any[], 
  agent: any,
  maxAttempts: number = 2 // OTIMIZADO: Reduzido de 3 para 2 tentativas
): Promise<{ success: boolean; data?: any; error?: string }> {
  let attempts = 0;
  let lastGeneratedTitle = '';
  
  while (attempts < maxAttempts) {
    attempts++;
    console.log(`üîÑ Tentativa ${attempts} de ${maxAttempts} para gerar t√≠tulo √∫nico (modo r√°pido)...`);
    
    try {
      // Gerar novo t√≠tulo via IA
      const openaiResponse = await generateMeliDescriptionWithOpenAI(
        product, 
        imageAnalysis, 
        productId, 
        skus, 
        specifications, 
        agent,
        attempts > 1 // Se n√£o √© a primeira tentativa, pedir para variar
      );
      
      if (!openaiResponse.success) {
        console.log(`‚ùå Erro na tentativa ${attempts}:`, openaiResponse.error);
        continue;
      }
      
      const generatedTitle = openaiResponse.data?.title;
      if (!generatedTitle) {
        console.log(`‚ùå T√≠tulo n√£o gerado na tentativa ${attempts}`);
        continue;
      }
      
      // Verificar se o t√≠tulo tem no m√°ximo 60 caracteres
      let finalTitle = generatedTitle;
      if (finalTitle.length > 60) {
        finalTitle = truncateTitleIntelligently(finalTitle, 60);
        console.log(`‚ö†Ô∏è T√≠tulo truncado inteligentemente para ${finalTitle.length} caracteres na tentativa ${attempts}:`, finalTitle);
      }
      
      // OTIMIZADO: Verificar unicidade apenas na primeira tentativa para economizar tempo
      if (attempts === 1) {
        const exists = await checkTitleExists(finalTitle, productId);
        if (!exists) {
          console.log(`‚úÖ T√≠tulo √∫nico encontrado na primeira tentativa:`, finalTitle);
          return {
            success: true,
            data: {
              title: finalTitle,
              description: openaiResponse.data?.description,
              clothing_type: openaiResponse.data?.clothing_type,
              sleeve_type: openaiResponse.data?.sleeve_type,
              gender: openaiResponse.data?.gender,
              color: openaiResponse.data?.color,
              modelo: openaiResponse.data?.modelo,
              tokensUsed: openaiResponse.data?.tokensUsed,
              tokensPrompt: openaiResponse.data?.tokensPrompt,
              tokensCompletion: openaiResponse.data?.tokensCompletion,
              cost: openaiResponse.data?.cost,
              requestId: openaiResponse.data?.requestId,
              responseTime: openaiResponse.data?.responseTime
            }
          };
        }
      } else {
        // Na segunda tentativa, usar diretamente com sufixo √∫nico para economizar tempo
        const uniqueSuffix = ` ${Date.now().toString().slice(-4)}`;
        const finalTitleWithSuffix = finalTitle.length + uniqueSuffix.length <= 60 
          ? finalTitle + uniqueSuffix
          : truncateTitleIntelligently(finalTitle, 60 - uniqueSuffix.length) + uniqueSuffix;
        
        console.log(`‚úÖ T√≠tulo com sufixo √∫nico gerado na tentativa ${attempts}:`, finalTitleWithSuffix);
        return {
          success: true,
          data: {
            title: finalTitleWithSuffix,
            description: openaiResponse.data?.description,
            clothing_type: openaiResponse.data?.clothing_type,
            sleeve_type: openaiResponse.data?.sleeve_type,
            gender: openaiResponse.data?.gender,
            color: openaiResponse.data?.color,
            modelo: openaiResponse.data?.modelo,
            tokensUsed: openaiResponse.data?.tokensUsed,
            tokensPrompt: openaiResponse.data?.tokensPrompt,
            tokensCompletion: openaiResponse.data?.tokensCompletion,
            cost: openaiResponse.data?.cost,
            requestId: openaiResponse.data?.requestId,
            responseTime: openaiResponse.data?.responseTime
          }
        };
      }
      
      console.log(`‚ö†Ô∏è T√≠tulo duplicado na tentativa ${attempts}:`, finalTitle);
      lastGeneratedTitle = finalTitle;
      
    } catch (error) {
      console.log(`‚ùå Erro na tentativa ${attempts}:`, error);
    }
  }
  
  // Se n√£o conseguir gerar t√≠tulo √∫nico, usar o √∫ltimo gerado com sufixo
  console.log(`‚ö†Ô∏è N√£o foi poss√≠vel gerar t√≠tulo √∫nico ap√≥s ${maxAttempts} tentativas`);
  const fallbackTitle = lastGeneratedTitle || 'Produto de Vestu√°rio';
  const uniqueSuffix = ` ${Date.now().toString().slice(-4)}`;
  const finalFallback = fallbackTitle.length + uniqueSuffix.length <= 60 
    ? fallbackTitle + uniqueSuffix
    : truncateTitleIntelligently(fallbackTitle, 60 - uniqueSuffix.length) + uniqueSuffix;
  
  console.log(`üîÑ Usando t√≠tulo de fallback:`, finalFallback);
  return {
    success: true,
    data: {
      title: finalFallback,
      description: 'Descri√ß√£o n√£o dispon√≠vel - erro na gera√ß√£o',
      clothing_type: 'Produto de Vestu√°rio',
      sleeve_type: 'Curta',
      gender: 'Sem g√™nero',
      color: 'Multicolorido',
      modelo: 'Produto B√°sico, Produto Casual, Produto Simples, Produto Essencial, Produto Vers√°til',
      tokensUsed: 0,
      tokensPrompt: 0,
      tokensCompletion: 0,
      cost: 0,
      requestId: '',
      responseTime: 0
    }
  };
}

// Fun√ß√£o para gerar t√≠tulo √∫nico (vers√£o simplificada para compatibilidade)
async function generateUniqueTitle(baseTitle: string, productId: number, maxAttempts: number = 5): Promise<string> {
  let title = baseTitle;
  let attempts = 0;
  
  while (attempts < maxAttempts) {
    const exists = await checkTitleExists(title, productId);
    if (!exists) {
      return title;
    }
    
    // Se t√≠tulo existe, adicionar sufixo num√©rico
    attempts++;
    const suffix = ` ${attempts}`;
    title = baseTitle.length + suffix.length <= 60 
      ? baseTitle + suffix
      : truncateTitleIntelligently(baseTitle, 60 - suffix.length) + suffix;
  }
  
  // Se n√£o conseguir gerar t√≠tulo √∫nico, retornar com timestamp
  const timestampSuffix = ` ${Date.now().toString().slice(-4)}`;
  return baseTitle.length + timestampSuffix.length <= 60 
    ? baseTitle + timestampSuffix
    : truncateTitleIntelligently(baseTitle, 60 - timestampSuffix.length) + timestampSuffix;
}

export async function POST(request: NextRequest) {
  try {
    // Evitar execu√ß√£o durante o build do Next.js
    if (checkBuildEnvironment()) {
      return NextResponse.json({ error: 'API n√£o dispon√≠vel durante build' }, { status: 503 });
    }

    console.log('üîÑ Iniciando gera√ß√£o de descri√ß√£o do Marketplace...');
    
    let body;
    try {
      body = await request.json();
      console.log('üìù Body recebido:', body);
    } catch (parseError) {
      console.error('‚ùå Erro ao fazer parse do JSON:', parseError);
      return NextResponse.json({
        success: false,
        message: 'Erro ao processar dados da requisi√ß√£o'
      }, { status: 400 });
    }
    
    const { productId, forceRegenerate = false } = body;

    if (!productId) {
      console.log('‚ùå productId n√£o fornecido');
      return NextResponse.json({
        success: false,
        message: 'productId √© obrigat√≥rio'
      }, { status: 400 });
    }

    // Validar se productId √© um n√∫mero
    const numericProductId = parseInt(productId);
    if (isNaN(numericProductId)) {
      console.log('‚ùå productId inv√°lido:', productId);
      return NextResponse.json({
        success: false,
        message: 'productId deve ser um n√∫mero v√°lido'
      }, { status: 400 });
    }

    console.log('üîÑ Gerando descri√ß√£o do Marketplace para produto ID:', productId);

    // 1. Buscar dados completos do produto
    console.log('üîç Buscando dados completos do produto...');
    let products;
    try {
      const productQuery = `
        SELECT 
          p.*,
          b.name as brand_name,
          c.name as category_name
        FROM products_vtex p
        LEFT JOIN brands b ON p.brand_id = b.id
        LEFT JOIN categories_vtex c ON p.category_id = c.vtex_id
        WHERE p.id = ?
      `;

      products = await executeQuery(productQuery, [numericProductId]);
      console.log('üìä Resultado da busca do produto:', products?.length || 0, 'registros');
    } catch (dbError) {
      console.error('‚ùå Erro ao buscar produto no banco:', dbError);
      return NextResponse.json({
        success: false,
        message: 'Erro ao buscar produto no banco de dados'
      }, { status: 500 });
    }
    
    if (!products || products.length === 0) {
      console.log('‚ùå Produto n√£o encontrado');
      return NextResponse.json({
        success: false,
        message: 'Produto n√£o encontrado'
      }, { status: 404 });
    }

    const product = products[0];
    console.log('üì¶ Produto encontrado:', product.name);

    // 2. Buscar SKUs do produto
    console.log('üîç Buscando SKUs do produto...');
    let skus = [];
    try {
      const skuQuery = `
        SELECT 
          s.*,
          s.name as sku_name,
          s.manufacturer_code,
          s.measurement_unit,
          s.unit_multiplier,
          s.is_kit,
          s.commercial_condition_id,
          s.reward_value,
          s.estimated_date_arrival
        FROM skus_vtex s
        WHERE s.product_id = ?
        ORDER BY s.id
      `;
      
      skus = await executeQuery(skuQuery, [numericProductId]);
      console.log('üìä SKUs encontrados:', skus?.length || 0);
    } catch (error) {
      console.log('‚ö†Ô∏è Erro ao buscar SKUs:', error);
      skus = [];
    }

    // 3. Buscar especifica√ß√µes do produto (se a tabela existir)
    console.log('üîç Buscando especifica√ß√µes do produto...');
    let specifications = [];
    try {
      const specQuery = `
        SELECT 
          ps.*,
          ps.field_name,
          ps.field_value_ids,
          ps.field_group_name
        FROM product_specifications ps
        WHERE ps.product_id = ?
        ORDER BY ps.field_group_name, ps.field_name
      `;
      
      specifications = await executeQuery(specQuery, [numericProductId]);
      console.log('üìä Especifica√ß√µes encontradas:', specifications?.length || 0);
    } catch (error) {
      console.log('‚ö†Ô∏è Tabela product_specifications n√£o existe ou erro ao buscar:', (error as any)?.message);
      specifications = [];
    }

    // 4. Buscar an√°lise de imagens mais recente
    let imageAnalysis = null;
    try {
      console.log('üîç Buscando an√°lise de imagens...');
      const analysisQuery = `
        SELECT 
          ial.*,
          a.name as agent_name
        FROM image_analysis_logs ial
        LEFT JOIN agents a ON ial.agent_id = a.id
        WHERE ial.product_id = ?
        ORDER BY ial.created_at DESC
        LIMIT 1
      `;
      
      const analyses = await executeQuery(analysisQuery, [numericProductId]);
      console.log('üìä An√°lises encontradas:', analyses?.length || 0);
      
      if (analyses && analyses.length > 0) {
        imageAnalysis = analyses[0];
        console.log('üñºÔ∏è An√°lise de imagem encontrada');
      } else {
        console.log('üñºÔ∏è Nenhuma an√°lise de imagem encontrada');
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Erro ao buscar an√°lise de imagens:', error);
      // N√£o falhar a opera√ß√£o por causa da an√°lise de imagens
      imageAnalysis = null;
    }

    // 3. Verificar se j√° existe descri√ß√£o (se n√£o for regenera√ß√£o for√ßada)
    if (!forceRegenerate) {
      console.log('üîç Verificando se j√° existe descri√ß√£o...');
      try {
        const existingQuery = `SELECT * FROM marketplace WHERE product_id = ?`;
        const existing = await executeQuery(existingQuery, [numericProductId]);
        console.log('üìä Descri√ß√µes existentes:', existing?.length || 0);
        
        if (existing && existing.length > 0) {
          console.log('‚úÖ Descri√ß√£o j√° existe, retornando...');
          return NextResponse.json({
            success: true,
            data: existing[0],
            message: 'Descri√ß√£o j√° existe'
          });
        }
      } catch (error) {
        console.log('‚ö†Ô∏è Erro ao verificar descri√ß√µes existentes:', error);
        // Continuar com a gera√ß√£o mesmo se houver erro na verifica√ß√£o
      }
    }

    // 5. Buscar agente de marketplace
    console.log('üîç Buscando agente de marketplace...');
    let agent;
    try {
      const agentQuery = `
        SELECT * FROM agents 
        WHERE function_type = 'marketplace_description_generation' 
        AND is_active = TRUE
        LIMIT 1
      `;
      const agents = await executeQuery(agentQuery);
      console.log('üìä Agentes encontrados:', agents?.length || 0);
      
      if (!agents || agents.length === 0) {
        throw new Error('Agente de marketplace n√£o encontrado. Configure o agente na tabela agents.');
      }
      
      agent = agents[0];
      console.log('ü§ñ Agente encontrado:', agent.name);
    } catch (dbError) {
      console.error('‚ùå Erro ao buscar agente de marketplace:', dbError);
      return NextResponse.json({
        success: false,
        message: 'Erro ao acessar agente de marketplace no banco de dados'
      }, { status: 500 });
    }

    // 6. Gerar t√≠tulo √∫nico e descri√ß√£o em uma √∫nica chamada (OTIMIZADO)
    console.log('ü§ñ Gerando t√≠tulo √∫nico e descri√ß√£o com IA (modo r√°pido)...');
    const startTime = Date.now();
    const openaiResponse = await generateUniqueTitleWithAI(product, imageAnalysis, numericProductId, skus, specifications, agent);
    const generationTime = Date.now() - startTime;
    console.log(`ü§ñ Resposta da OpenAI (${generationTime}ms):`, openaiResponse.success ? 'Sucesso' : 'Erro');
    
    if (!openaiResponse.success) {
      console.log('‚ùå Erro na OpenAI:', openaiResponse.error);
      return NextResponse.json({
        success: false,
        message: openaiResponse.error || 'Erro ao gerar descri√ß√£o com IA'
      }, { status: 500 });
    }

    const { title: uniqueTitle, description, clothing_type, sleeve_type, gender, color, modelo, tokensUsed } = openaiResponse.data || {};
    console.log('üìù Dados gerados:', { title: uniqueTitle, description: description?.substring(0, 50) + '...' });

    // 5. Salvar no banco de dados
    console.log('üíæ Salvando no banco de dados...');
    let saveResult;
    try {
      saveResult = await saveMarketplaceDescription({
        productId: numericProductId,
        title: uniqueTitle,
        description,
        openaiModel: agent.model || 'gpt-4o-mini',
        tokensUsed: openaiResponse.data?.tokensUsed || 0,
        tokensPrompt: openaiResponse.data?.tokensPrompt || 0,
        tokensCompletion: openaiResponse.data?.tokensCompletion || 0,
        cost: openaiResponse.data?.cost || 0,
        requestId: openaiResponse.data?.requestId || '',
        responseTime: openaiResponse.data?.responseTime || 0,
        maxTokens: parseInt(agent.max_tokens) || 3000,
        temperature: parseFloat(agent.temperature) || 0.7,
        // Novas colunas do marketplace - usando dados do produto + an√°lise de imagem
      });
      
      console.log('üíæ Resultado do salvamento:', saveResult.success ? 'Sucesso' : 'Erro');
      
      if (!saveResult.success) {
        console.log('‚ùå Erro ao salvar:', saveResult.message);
        return NextResponse.json({
          success: false,
          message: 'Erro ao salvar descri√ß√£o no banco de dados'
        }, { status: 500 });
      }
    } catch (saveError) {
      console.error('‚ùå Erro ao salvar no banco:', saveError);
      return NextResponse.json({
        success: false,
        message: 'Erro ao salvar descri√ß√£o no banco de dados'
      }, { status: 500 });
    }

    // 6. Gerar respostas das caracter√≠sticas usando subagente
    console.log('ü§ñ Gerando respostas das caracter√≠sticas...');
    console.log('üì¶ Produto para caracter√≠sticas:', product.name);
    console.log('üñºÔ∏è An√°lise de imagem para caracter√≠sticas:', imageAnalysis ? 'Dispon√≠vel' : 'N√£o dispon√≠vel');
    console.log('üìù T√≠tulo para caracter√≠sticas:', uniqueTitle);
    console.log('üîë Chave OpenAI para caracter√≠sticas:', process.env.OPENAI_API_KEY ? 'Configurada' : 'N√ÉO CONFIGURADA');
    
    const characteristicsResponse = await generateCharacteristicsResponses(
      product,
      imageAnalysis,
      { title: uniqueTitle, description },
      numericProductId,
      process.env.OPENAI_API_KEY || ''
    );

    if (characteristicsResponse.success) {
      console.log(`‚úÖ Respostas das caracter√≠sticas geradas: ${characteristicsResponse.data?.length || 0}`);
    } else {
      console.log('‚ö†Ô∏è Erro ao gerar respostas das caracter√≠sticas:', characteristicsResponse.error);
    }

    console.log('‚úÖ Descri√ß√£o do Marketplace gerada com sucesso!');
    return NextResponse.json({
      success: true,
      data: {
        ...saveResult.data,
        title: uniqueTitle,
        description,
        clothing_type,
        sleeve_type,
        gender,
        color,
        modelo,
        tokensUsed,
        characteristicsResponses: characteristicsResponse.data || []
      }
    });

  } catch (error: any) {
    console.error('‚ùå Erro ao gerar descri√ß√£o do Marketplace:', error);
    
    return NextResponse.json({
      success: false,
      message: 'Erro interno do servidor ao gerar descri√ß√£o',
      error: error.message
    }, { status: 500 });
  }
}

async function generateMeliDescriptionWithOpenAI(
  product: any, 
  imageAnalysis: any, 
  productId: number, 
  skus: any[] = [], 
  specifications: any[] = [], 
  agent: any,
  shouldVary: boolean = false,
  predefinedTitle?: string
) {
  try {
    console.log('ü§ñ Iniciando gera√ß√£o com OpenAI...');
    console.log('üì¶ Produto:', product.name);
    console.log('üñºÔ∏è An√°lise de imagem:', imageAnalysis ? 'Dispon√≠vel' : 'N√£o dispon√≠vel');
    
    // Agente j√° foi buscado na fun√ß√£o principal
    console.log('ü§ñ Usando agente:', agent.name);

    // Buscar chave da OpenAI das vari√°veis de ambiente
    console.log('üîç Buscando chave da OpenAI...');
    const openaiApiKey = process.env.OPENAI_API_KEY;
    console.log('üîë Chave da API OpenAI:', openaiApiKey ? 'Configurada' : 'N√ÉO CONFIGURADA');
    
    if (!openaiApiKey || openaiApiKey.trim() === '') {
      console.log('‚ö†Ô∏è Chave da OpenAI n√£o configurada no .env');
      throw new Error('Chave da API OpenAI n√£o configurada. Configure OPENAI_API_KEY no arquivo .env.');
    }

    console.log('‚úÖ Chave da OpenAI encontrada, continuando...');
    
    // OTIMIZADO: Usar modelo mais r√°pido para gera√ß√£o de descri√ß√µes
    const modelToUse = agent.model === 'gpt-4o' ? 'gpt-4o-mini' : (agent.model || 'gpt-4o-mini');
    console.log(`üöÄ Usando modelo otimizado: ${modelToUse} (modo r√°pido)`);

    // Construir prompt para o Marketplace usando configura√ß√µes do agente
    let systemPrompt = agent.system_prompt || `Voc√™ √© um especialista em e-commerce e marketing digital, focado especificamente no Marketplace. Sua tarefa √© criar t√≠tulos e descri√ß√µes otimizadas para produtos de moda e vestu√°rio que maximizem a visibilidade e convers√£o no Marketplace.

REGRAS IMPORTANTES:
1. T√≠tulo deve ter M√ÅXIMO 60 caracteres (limite obrigat√≥rio do Marketplace)
2. Descri√ß√£o deve ter M√çNIMO 300 palavras, estruturada e eficiente
3. Use palavras-chave relevantes para SEO
4. Inclua informa√ß√µes t√©cnicas e de qualidade
5. Seja persuasivo mas honesto
6. Foque nos benef√≠cios para o cliente
7. Use linguagem clara e direta
8. Estruture a descri√ß√£o com se√ß√µes organizadas
9. USE TAGS HTML B√ÅSICAS para formata√ß√£o: <br> para quebras de linha, <b> para negrito, <li> para listas
10. OBRIGAT√ìRIO: A descri√ß√£o deve ter pelo menos 300 palavras para garantir qualidade e SEO
11. NUNCA AFIRME materiais espec√≠ficos (como "100% algod√£o", "poli√©ster", etc.) sem ter certeza absoluta
12. Use termos gen√©ricos como "material de qualidade", "tecido selecionado", "composi√ß√£o premium" quando n√£o souber o material exato`;

    // Adicionar instru√ß√µes de unicidade se necess√°rio
    if (shouldVary) {
      systemPrompt += `

INSTRU√á√ïES DE UNICIDADE E CRIATIVIDADE:
- CR√çTICO: O t√≠tulo deve ser √öNICO e n√£o duplicar t√≠tulos existentes no banco de dados
- Se esta for uma tentativa de regenera√ß√£o, CRIE um t√≠tulo COMPLETAMENTE DIFERENTE E MAIS CRIATIVO
- Use sin√¥nimos, varia√ß√µes de palavras e estruturas diferentes
- SEMPRE use palavras de ALTO IMPACTO e BENEF√çCIOS √∫nicos
- Inclua EMO√á√ïES e SENTIMENTOS que geram mais cliques
- Use TEND√äNCIAS DE MODA e PALAVRAS DE A√á√ÉO
- Mantenha as informa√ß√µes essenciais (categoria, marca, g√™nero, cor) mas varie a apresenta√ß√£o
- Exemplos de varia√ß√£o criativa:
  * Em vez de "Camiseta Nike Masculino Azul" ‚Üí "Descubra a Camiseta Nike Azul - Estilo que Faz Sucesso"
  * Em vez de "Moletom Adidas Unissex Preto" ‚Üí "Moletom Adidas Preto Premium - Conforto Garantido"
  * Em vez de "Blusa Zara Feminino Rosa" ‚Üí "Blusa Rosa Zara - Look Feminino que Conquista"`;
    }

    // Se h√° um t√≠tulo pr√©-definido, usar ele
    if (predefinedTitle) {
      systemPrompt += `

T√çTULO PR√â-DEFINIDO:
- Use EXATAMENTE este t√≠tulo: "${predefinedTitle}"
- N√ÉO gere um novo t√≠tulo, use o fornecido
- Foque apenas na gera√ß√£o da descri√ß√£o usando este t√≠tulo`;
    }

    systemPrompt += `

CRIATIVIDADE E OTIMIZA√á√ÉO DE T√çTULOS:
- Crie t√≠tulos √öNICOS e ATRATIVOS que se destaquem da concorr√™ncia
- Use palavras-chave de ALTO IMPACTO que geram mais cliques
- Evite t√≠tulos gen√©ricos como "Camiseta B√°sica" ou "Produto de Qualidade"
- Inclua BENEF√çCIOS e CARACTER√çSTICAS √∫nicas do produto
- Use ADJETIVOS PODEROSOS: "Premium", "Exclusivo", "Tend√™ncia", "Moderno", "Estiloso"
- Inclua PALAVRAS DE A√á√ÉO: "Descubra", "Experimente", "Conquiste", "Transforme"
- Mencione OCASI√ïES DE USO: "Para o Dia a Dia", "Ideal para Trabalho", "Perfeito para Festas"
- Use TEND√äNCIAS DE MODA: "Estilo Urbano", "Look Casual", "Visual Moderno", "Fashion"
- Inclua SENTIMENTOS: "Confort√°vel", "Elegante", "Descolado", "Sofisticado"
- Evite repetir o nome da marca no in√≠cio (coloque no final se necess√°rio)
- Use EMO√á√ïES: "Que Vai Te Surpreender", "Que Voc√™ Vai Amar", "Que Faz Sucesso"

EXEMPLOS DE T√çTULOS CRIATIVOS:
‚ùå Ruim: "Camiseta Stance Verde Militar"
‚úÖ Bom: "Camiseta Stance Verde Militar - Estilo Urbano"
‚úÖ Melhor: "Descubra a Camiseta Stance Verde Militar - Look Moderno"
‚úÖ Excelente: "Camiseta Stance Verde Militar - Estilo Urbano que Faz Sucesso"

‚ùå Ruim: "Moletom B√°sico Cinza"
‚úÖ Bom: "Moletom Premium Cinza - Conforto Garantido"
‚úÖ Melhor: "Moletom Cinza Premium - Ideal para o Dia a Dia"
‚úÖ Excelente: "Moletom Cinza Premium - Conforto que Voc√™ Vai Amar"

ESTRUTURA DA DESCRI√á√ÉO (M√çNIMO 300 PALAVRAS):
- Par√°grafo introdut√≥rio sobre o produto (40-60 palavras)
- Informa√ß√µes sobre qualidade e benef√≠cios (40-50 palavras)
- Detalhes t√©cnicos e materiais (50-70 palavras)
- Se√ß√£o "Destaques do produto" com 4-5 bullet points (50-70 palavras)
- Se√ß√£o "Material e cuidados" (30-40 palavras)
- Se√ß√£o "Por que escolher" com 3-4 vantagens (40-50 palavras)
- Se√ß√£o "FAQ - Perguntas frequentes" com 4-5 perguntas (60-80 palavras)
- Call-to-action final (15-25 palavras)

FORMATO DE RESPOSTA (JSON):
{
  "title": "t√≠tulo criativo e otimizado para busca (m√°ximo 60 caracteres)",
  "description": "descri√ß√£o completa estruturada",
  "clothing_type": "Tipo de roupa (ex: Camiseta, Camiseta Polo, Moletom, etc.)",
  "sleeve_type": "Tipo de manga (Curta, Longa, 3/4, Sem Mangas, Tomara que caia)",
  "gender": "G√™nero (Masculino, Feminino, Meninos, Meninas, Beb√™s, Sem g√™nero, Sem g√™nero infantil)",
  "color": "Cor principal do produto (ex: Azul, Vermelho, Preto, Branco, etc.)",
  "modelo": "5 varia√ß√µes do nome do produto separadas por v√≠rgula (ex: Camiseta B√°sica, Camiseta Casual, Camisa Dia a Dia, Camisa Lisa, Camisa para Trabalhar)",
}`;

    const userPrompt = `Crie uma descri√ß√£o otimizada para o Marketplace para este produto:

=== DADOS B√ÅSICOS DO PRODUTO ===
PRODUTO ORIGINAL: ${product.name}
REF_ID: ${product.ref_id || 'N/A'}
MARCA: ${product.brand_name || 'N/A'}
CATEGORIA: ${product.category_name || 'N/A'}
DEPARTAMENTO ID: ${product.department_id || 'N/A'}
DESCRI√á√ÉO ATUAL: ${product.description || 'N/A'}
DESCRI√á√ÉO CURTA: ${product.description_short || 'N/A'}
T√çTULO ATUAL: ${product.title || 'N/A'}
PALAVRAS-CHAVE: ${product.keywords || 'N/A'}
META TAG DESCRIPTION: ${product.meta_tag_description || 'N/A'}
C√ìDIGO DE IMPOSTO: ${product.tax_code || 'N/A'}
C√ìDIGO SUPPLIER: ${product.supplier_id || 'N/A'}
SCORE: ${product.score || 'N/A'}
DATA DE LAN√áAMENTO: ${product.release_date || 'N/A'}
UNIDADE DE MEDIDA: ${product.measurement_unit || 'N/A'}
MULTIPLICADOR: ${product.unit_multiplier || 'N/A'}

=== DADOS DOS SKUs ===
${skus.length > 0 ? skus.map((sku, index) => `
SKU ${index + 1}:
- Nome: ${sku.sku_name || 'N/A'}
- C√≥digo Fabricante: ${sku.manufacturer_code || 'N/A'}
- √â Kit: ${sku.is_kit ? 'Sim' : 'N√£o'}
- Unidade: ${sku.measurement_unit || 'N/A'}
- Multiplicador: ${sku.unit_multiplier || 'N/A'}
- Valor Recompensa: ${sku.reward_value || 'N/A'}
- Data Chegada: ${sku.estimated_date_arrival || 'N/A'}
`).join('') : 'Nenhum SKU encontrado'}

=== ESPECIFICA√á√ïES T√âCNICAS ===
${specifications.length > 0 ? specifications.map((spec, index) => `
${index + 1}. ${spec.field_name}: ${spec.field_value_ids || 'N/A'} ${spec.field_group_name ? `(Grupo: ${spec.field_group_name})` : ''}
`).join('') : 'Nenhuma especifica√ß√£o encontrada'}

=== AN√ÅLISE T√âCNICA DAS IMAGENS ===
${imageAnalysis ? `
${imageAnalysis.contextual_analysis}
` : 'Nenhuma an√°lise de imagem dispon√≠vel'}

INSTRU√á√ïES CR√çTICAS: 
- Crie um NOVO T√çTULO otimizado (n√£o use o nome original do produto)
- OBRIGAT√ìRIO: O t√≠tulo DEVE sempre incluir: CATEGORIA + MARCA + G√äNERO + COR
- OBRIGAT√ìRIO: O t√≠tulo DEVE sempre incluir o g√™nero: "Masculino", "Feminino" ou "Unissex"
- OBRIGAT√ìRIO: O t√≠tulo DEVE sempre incluir a marca do produto
- OBRIGAT√ìRIO: O t√≠tulo DEVE sempre incluir a categoria do produto
- OBRIGAT√ìRIO: O t√≠tulo DEVE sempre incluir a cor detectada
- Na descri√ß√£o, use EXCLUSIVAMENTE o NOVO T√çTULO que voc√™ criou, NUNCA o nome original
- O novo t√≠tulo deve ser mais atrativo e otimizado para SEO
- TODA a descri√ß√£o deve referenciar o produto pelo novo t√≠tulo otimizado

USO DOS DADOS T√âCNICOS:
- Use as ESPECIFICA√á√ïES T√âCNICAS para criar se√ß√µes detalhadas sobre materiais, composi√ß√£o e caracter√≠sticas
- Use os dados dos SKUs para mencionar varia√ß√µes, c√≥digos de fabricante e informa√ß√µes de disponibilidade
- Use as PALAVRAS-CHAVE do produto para otimizar SEO na descri√ß√£o
- Use a META TAG DESCRIPTION como refer√™ncia para criar conte√∫do otimizado
- Use o SCORE do produto para destacar qualidade e popularidade
- Use a DATA DE LAN√áAMENTO para mencionar se √© um produto novo ou lan√ßamento recente
- Use as informa√ß√µes de UNIDADE DE MEDIDA e MULTIPLICADOR para detalhes t√©cnicos
- Use o C√ìDIGO DE IMPOSTO e SUPPLIER para informa√ß√µes de conformidade e origem

ESTRUTURA OBRIGAT√ìRIA DA DESCRI√á√ÉO:
1. Par√°grafo introdut√≥rio sobre o produto (use o novo t√≠tulo)
2. Informa√ß√µes sobre a marca e qualidade
3. Detalhes t√©cnicos e materiais
4. Benef√≠cios e caracter√≠sticas
5. Se√ß√£o "Destaques do produto" com bullet points
6. Se√ß√£o "Material e cuidados"
7. Se√ß√£o "Por que escolher" com vantagens
8. Se√ß√£o "FAQ - Perguntas frequentes" com 4-5 perguntas
9. Call-to-action final

EXEMPLOS DE COMO MELHORAR O CONTE√öDO (APENAS SUGEST√ïES):

Exemplo 1 - T√≠tulos com g√™nero obrigat√≥rio:
- Para produtos masculinos: "[Nome do Produto] Masculino - [Caracter√≠sticas]"
- Para produtos femininos: "[Nome do Produto] Feminino - [Caracter√≠sticas]"  
- Para produtos unissex: "[Nome do Produto] Unissex - [Caracter√≠sticas]"

Exemplo 2 - Introdu√ß√£o mais envolvente:
"Descubra o <b>[Novo T√≠tulo]</b>, uma pe√ßa essencial para quem busca [benef√≠cio principal]. Imagine-se [situa√ß√£o de uso espec√≠fica] com total conforto e estilo. Este produto foi pensado para [p√∫blico-alvo] que valoriza [caracter√≠sticas importantes]."

Exemplo 2 - Storytelling da marca:
"A <b>[Marca]</b> nasceu da paix√£o por [hist√≥ria da marca]. Cada produto carrega nossa miss√£o de [valores da marca]. Quando voc√™ escolhe [Marca], est√° escolhendo [benef√≠cio da escolha da marca]."

Exemplo 3 - Destaques mais persuasivos:
"<b>O que torna este produto especial:</b><br>
<li><b>Design inteligente:</b> [explica√ß√£o detalhada do design]</li>
<li><b>Conforto garantido:</b> [explica√ß√£o do conforto]</li>
<li><b>Durabilidade excepcional:</b> [explica√ß√£o da durabilidade]</li>
<li><b>Versatilidade √∫nica:</b> [explica√ß√£o da versatilidade]</li>"

Exemplo 3b - Como falar sobre materiais sem afirmar:
"<b>Qualidade e conforto:</b><br>
<li><b>Material selecionado:</b> Tecido de alta qualidade que oferece [benef√≠cios]</li>
<li><b>Composi√ß√£o premium:</b> Material cuidadosamente escolhido para [prop√≥sito]</li>
<li><b>Acabamento refinado:</b> Detalhes que garantem [benef√≠cios espec√≠ficos]</li>"

Exemplo 4 - FAQ mais humanizado:
"<b>D√∫vidas frequentes:</b><br>
<b>Este produto √© adequado para [situa√ß√£o espec√≠fica]?</b><br>
Sim! O [Novo T√≠tulo] foi desenvolvido pensando em [situa√ß√£o espec√≠fica]. [Explica√ß√£o detalhada com benef√≠cios].<br><br>

<b>Como posso ter certeza da qualidade?</b><br>
Nossa garantia de [tempo] cobre [cobertura da garantia]. Al√©m disso, [argumentos de qualidade adicionais]."

Exemplo 5 - Call-to-action mais persuasivo:
"N√£o perca a oportunidade de ter o <b>[Novo T√≠tulo]</b> em seu guarda-roupa. [Benef√≠cio imediato da compra]. [Urg√™ncia ou escassez]. Garanta o seu agora e [benef√≠cio adicional da compra]!"

INSTRU√á√ïES DE FORMATA√á√ÉO HTML:
- Use <br> para quebras de linha (n√£o use \n)
- Use <b>texto</b> para destacar palavras importantes
- Use <li>item</li> para criar listas (n√£o use ‚Ä¢ ou -)
- Use <br><br> para separar par√°grafos
- Mantenha o HTML simples e limpo

DETEC√á√ÉO DE TIPO DE ROUPA:
- Analise o nome do produto para identificar o tipo de roupa
- Se cont√©m "Polo" ou "polo" ‚Üí "Camiseta Polo"
- Se cont√©m "Camiseta" mas n√£o "Polo" ‚Üí "Camiseta"
- Se cont√©m "Moletom" ‚Üí "Moletom"
- Se cont√©m "Cal√ßa" ‚Üí "Cal√ßa"
- Se cont√©m "Short" ‚Üí "Short"
- Se cont√©m "Jaqueta" ‚Üí "Jaqueta"
- Se cont√©m "Blusa" ‚Üí "Blusa"
- Se cont√©m "Vestido" ‚Üí "Vestido"
- Se cont√©m "Saia" ‚Üí "Saia"
- Se n√£o identificar, use o tipo mais gen√©rico baseado no contexto

DETEC√á√ÉO DE TIPO DE MANGA:
- Analise o nome do produto e descri√ß√£o para identificar o tipo de manga
- Se cont√©m "Manga Curta", "Curta", "Regata" ‚Üí "Curta"
- Se cont√©m "Manga Longa", "Longa", "Comprida" ‚Üí "Longa"
- Se cont√©m "3/4", "Tr√™s Quartos", "Meia Manga" ‚Üí "3/4"
- Se cont√©m "Sem Manga", "Sem Mangas", "Regata", "Tank Top" ‚Üí "Sem Mangas"
- Se cont√©m "Tomara que Caia", "Tomara que caia", "Off Shoulder" ‚Üí "Tomara que caia"
- Se n√£o identificar, use "Curta" como padr√£o para camisetas e "Longa" para blusas/jaquetas

DETEC√á√ÉO DE G√äNERO:
- Analise o nome do produto e descri√ß√£o para identificar o g√™nero
- Se cont√©m "Masculina", "Masculino", "Homem", "Men" ‚Üí "Masculino"
- Se cont√©m "Feminina", "Feminino", "Mulher", "Woman", "Lady" ‚Üí "Feminino"
- Se cont√©m "Meninos", "Boy", "Boys" ‚Üí "Meninos"
- Se cont√©m "Meninas", "Girl", "Girls" ‚Üí "Meninas"
- Se cont√©m "Beb√™", "Beb√™s", "Baby", "Infantil" (para beb√™s) ‚Üí "Beb√™s"
- Se cont√©m "Unissex", "Uni", "Neutro" ‚Üí "Sem g√™nero"
- Se cont√©m "Infantil" (para crian√ßas) ‚Üí "Sem g√™nero infantil"
- Se n√£o identificar, use "Sem g√™nero" como padr√£o

DETEC√á√ÉO DE COR:
- Analise o nome do produto e descri√ß√£o para identificar a cor principal
- Procure por palavras como: Azul, Vermelho, Preto, Branco, Verde, Amarelo, Rosa, Roxo, Cinza, Marrom, Bege, etc.
- Se houver m√∫ltiplas cores, escolha a cor predominante
- Se n√£o identificar cor espec√≠fica, use "Multicolorido" ou a cor mais comum mencionada
- CR√çTICO: A cor detectada DEVE aparecer no t√≠tulo do produto
- A cor deve ser uma palavra simples e clara (ex: "Azul", "Preto", "Rosa")

ESTRUTURA OBRIGAT√ìRIA DO T√çTULO:
- O t√≠tulo DEVE incluir: CATEGORIA + MARCA + G√äNERO + COR
- LIMITE CR√çTICO: M√ÅXIMO 60 caracteres
- Formato: "[Nome do Produto] [Marca] [G√™nero] [Cor] - [Caracter√≠sticas]"
- Exemplos:
  * "Camiseta Nike Masculino Azul - Conforto" (42 caracteres)
  * "Blusa Zara Feminino Rosa - Elegante" (35 caracteres)
  * "Moletom Adidas Unissex Preto - Casual" (37 caracteres)
- OBRIGAT√ìRIO: Sempre incluir a marca do produto no t√≠tulo
- OBRIGAT√ìRIO: Sempre incluir a categoria do produto no t√≠tulo
- OBRIGAT√ìRIO: Sempre incluir o g√™nero detectado: "Masculino", "Feminino" ou "Unissex"
- OBRIGAT√ìRIO: Sempre incluir a cor detectada no t√≠tulo
- OBRIGAT√ìRIO: T√≠tulo deve ser √öNICO e n√£o duplicar t√≠tulos existentes
- O g√™nero no t√≠tulo deve corresponder exatamente ao campo "gender" detectado
- Se o g√™nero for "Masculino" ‚Üí t√≠tulo deve conter "Masculino"
- Se o g√™nero for "Feminino" ‚Üí t√≠tulo deve conter "Feminino"
- Se o g√™nero for "Sem g√™nero" ‚Üí t√≠tulo deve conter "Unissex"

GERA√á√ÉO DE VARIA√á√ïES DO NOME (CAMPO MODELO):
- Crie EXATAMENTE 5 varia√ß√µes do nome do produto separadas por v√≠rgula
- Estas varia√ß√µes N√ÉO devem aparecer no t√≠tulo ou na descri√ß√£o
- Use diferentes formas de chamar o mesmo produto
- Inclua varia√ß√µes que os clientes usariam para buscar o produto
- Exemplos de varia√ß√µes:
  * Para "Camiseta B√°sica": "Camiseta Casual, Camisa Dia a Dia, Camisa Lisa, Camisa para Trabalhar, Camiseta Simples"
  * Para "Blusa Elegante": "Blusa Social, Blusa para Festa, Blusa Feminina, Blusa Chique, Blusa Sofisticada"
  * Para "Moletom Confort√°vel": "Moletom Casual, Moletom para Casa, Moletom Quentinho, Moletom Relax, Moletom B√°sico"
- Formato: "Varia√ß√£o 1, Varia√ß√£o 2, Varia√ß√£o 3, Varia√ß√£o 4, Varia√ß√£o 5"
- Exemplo: "Camiseta B√°sica, Camiseta Casual, Camisa Dia a Dia, Camisa Lisa, Camisa para Trabalhar"


CRIATIVIDADE E FLEXIBILIDADE:
- Use os exemplos acima como inspira√ß√£o, n√£o como regras r√≠gidas
- Seja criativo na estrutura e abordagem
- Adapte o tom e estilo ao produto espec√≠fico
- Varie a linguagem para evitar repeti√ß√£o
- Crie conex√£o emocional com o cliente
- Use storytelling quando apropriado
- Seja aut√™ntico e persuasivo

CUIDADOS COM INFORMA√á√ïES T√âCNICAS:
- Use termos gen√©ricos: "material de qualidade", "tecido selecionado", "composi√ß√£o premium"
- Foque nos BENEF√çCIOS do material, n√£o na composi√ß√£o exata
- Se mencionar cuidados, seja gen√©rico: "siga as instru√ß√µes de lavagem do fabricante"

LEMBRE-SE: A descri√ß√£o deve usar APENAS o novo t√≠tulo otimizado, NUNCA o nome original do produto.

Retorne APENAS o JSON com as informa√ß√µes solicitadas.`;

    console.log('üåê Chamando API da OpenAI (modo r√°pido)...');
    const startTime = Date.now();
    let response;
    try {
      response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${openaiApiKey}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: modelToUse, // OTIMIZADO: Usar modelo mais r√°pido
          messages: [
            { role: 'system', content: systemPrompt },
            { role: 'user', content: userPrompt }
          ],
          max_tokens: Math.min(parseInt(agent.max_tokens) || 2000, 2000), // OTIMIZADO: Limitar a 2000 tokens
          temperature: Math.min(parseFloat(agent.temperature) || 0.5, 0.5), // OTIMIZADO: Reduzir temperatura para resposta mais r√°pida
          response_format: { type: 'json_object' },
          stream: false // OTIMIZADO: Garantir que n√£o seja streaming
        }),
      });

      if (!response.ok) {
        const errorData = await response.text();
        console.error('‚ùå Erro na API OpenAI:', response.status, errorData);
        throw new Error(`Erro na API OpenAI: ${response.status} - ${errorData}`);
      }
    } catch (fetchError) {
      console.error('‚ùå Erro na requisi√ß√£o para OpenAI:', fetchError);
      const errorMessage = fetchError instanceof Error ? fetchError.message : 'Erro desconhecido';
      throw new Error(`Erro na requisi√ß√£o para OpenAI: ${errorMessage}`);
    }

    const responseTime = Date.now() - startTime;
    let data;
    try {
      data = await response.json();
      console.log('‚úÖ Resposta da OpenAI recebida');
      console.log('‚è±Ô∏è Tempo de resposta:', responseTime, 'ms');
      console.log('üî¢ Tokens utilizados:', data.usage?.total_tokens || 0);
    } catch (jsonError) {
      console.error('‚ùå Erro ao fazer parse da resposta JSON:', jsonError);
      throw new Error('Resposta inv√°lida da OpenAI');
    }

    if (!data.choices || !data.choices[0] || !data.choices[0].message) {
      console.error('‚ùå Estrutura de resposta inv√°lida:', data);
      throw new Error('Resposta inv√°lida da OpenAI');
    }

    const content = data.choices[0].message.content;
    console.log('üìù Conte√∫do recebido:', content?.substring(0, 100) + '...');

    if (!content) {
      console.error('‚ùå Conte√∫do vazio na resposta da OpenAI');
      throw new Error('Resposta vazia da OpenAI');
    }

    let parsedContent;
    try {
      parsedContent = JSON.parse(content);
      console.log('üìã Conte√∫do parseado:', JSON.stringify(parsedContent, null, 2));
    } catch (parseError) {
      console.error('‚ùå Erro ao fazer parse do JSON:', parseError);
      console.error('‚ùå Conte√∫do que causou erro:', content);
      throw new Error('Resposta da OpenAI n√£o √© um JSON v√°lido');
    }

    // Debug: verificar campos dispon√≠veis
    console.log('üîç Campos dispon√≠veis na resposta:', Object.keys(parsedContent));
    console.log('üîç T√≠tulo recebido:', parsedContent.title);
    console.log('üîç Descri√ß√£o recebida:', parsedContent.description ? 'Dispon√≠vel' : 'N/A');

    // Se h√° um t√≠tulo pr√©-definido, usar ele
    let finalTitle;
    if (predefinedTitle) {
      finalTitle = predefinedTitle;
      console.log('üîç Usando t√≠tulo pr√©-definido:', finalTitle);
    } else {
      // Garantir que o t√≠tulo tenha no m√°ximo 60 caracteres
      finalTitle = parsedContent.title || parsedContent.titulo || 'T√≠tulo n√£o gerado';
      if (finalTitle.length > 60) {
        finalTitle = truncateTitleIntelligently(finalTitle, 60);
        console.log(`‚ö†Ô∏è T√≠tulo truncado inteligentemente para ${finalTitle.length} caracteres:`, finalTitle);
      }
    }

    // Se n√£o h√° t√≠tulo pr√©-definido, gerar t√≠tulo √∫nico
    let uniqueTitle = finalTitle;
    if (!predefinedTitle) {
      try {
        uniqueTitle = await generateUniqueTitle(finalTitle, productId);
        console.log('üîç T√≠tulo √∫nico gerado:', uniqueTitle);
      } catch (titleError) {
        console.error('‚ùå Erro ao gerar t√≠tulo √∫nico:', titleError);
        // Usar t√≠tulo original se houver erro na verifica√ß√£o de duplicatas
        uniqueTitle = finalTitle;
      }
    }

    return {
      success: true,
      data: {
        title: uniqueTitle,
        description: parsedContent.description || parsedContent.descricao || 'Descri√ß√£o n√£o gerada',
        clothing_type: parsedContent.clothing_type || 'Produto de Vestu√°rio',
        sleeve_type: parsedContent.sleeve_type || 'Curta',
        gender: parsedContent.gender || 'Sem g√™nero',
        color: parsedContent.color || 'Multicolorido',
        modelo: parsedContent.modelo || 'Produto B√°sico, Produto Casual, Produto Simples, Produto Essencial, Produto Vers√°til',
        tokensUsed: data.usage?.total_tokens || 0,
        tokensPrompt: data.usage?.prompt_tokens || 0,
        tokensCompletion: data.usage?.completion_tokens || 0,
        cost: calculateOpenAICost(data.usage?.total_tokens || 0, agent.model || 'gpt-4o-mini'),
        requestId: data.id || '',
        responseTime: responseTime
      }
    };

  } catch (error: any) {
    console.error('‚ùå Erro na gera√ß√£o com OpenAI:', error);
    return {
      success: false,
      error: error.message
    };
  }
}

// Fun√ß√£o para salvar descri√ß√£o do Marketplace na nova tabela marketplace
async function saveMarketplaceDescription(data: {
  productId: number;
  title: string;
  description: string;
  openaiModel: string;
  tokensUsed: number;
  tokensPrompt: number;
  tokensCompletion: number;
  cost: number;
  requestId: string;
  responseTime: number;
  maxTokens?: number;
  temperature?: number;
  // Novas colunas do marketplace
}) {
  try {
    const { 
      productId, 
      title, 
      description, 
      openaiModel,
      tokensUsed,
      tokensPrompt,
      tokensCompletion,
      cost,
      requestId,
      responseTime,
      maxTokens,
      temperature,
    } = data;

    // Inserir ou atualizar descri√ß√£o na tabela marketplace
    const insertQuery = `
      INSERT INTO marketplace (
        product_id, title, description, openai_model, openai_tokens_used, 
        openai_tokens_prompt, openai_tokens_completion, openai_cost, 
        openai_request_id, openai_response_time_ms, openai_max_tokens, 
        openai_temperature, status, generated_at
      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'generated', NOW())
      ON DUPLICATE KEY UPDATE
        title = VALUES(title),
        description = VALUES(description),
        openai_model = VALUES(openai_model),
        openai_tokens_used = VALUES(openai_tokens_used),
        openai_tokens_prompt = VALUES(openai_tokens_prompt),
        openai_tokens_completion = VALUES(openai_tokens_completion),
        openai_cost = VALUES(openai_cost),
        openai_request_id = VALUES(openai_request_id),
        openai_response_time_ms = VALUES(openai_response_time_ms),
        openai_max_tokens = VALUES(openai_max_tokens),
        openai_temperature = VALUES(openai_temperature),
        status = 'generated',
        generated_at = NOW(),
        updated_at = CURRENT_TIMESTAMP
    `;

    const result = await executeQuery(insertQuery, [
      productId,
      title,
      description,
      openaiModel,
      tokensUsed,
      tokensPrompt,
      tokensCompletion,
      cost,
      requestId,
      responseTime,
      maxTokens || 0,
      temperature || 0.7
    ]);

    console.log('‚úÖ Descri√ß√£o do Marketplace salva na tabela marketplace para produto ID:', productId);

    return {
      success: true,
      data: {
        id: (result as any).insertId,
        productId,
        title,
        description
      }
    };

  } catch (error: any) {
    console.error('‚ùå Erro ao salvar descri√ß√£o do Marketplace:', error);
    
    return {
      success: false,
      message: 'Erro interno do servidor ao salvar descri√ß√£o',
      error: error.message
    };
  }
}