import { NextRequest, NextResponse } from 'next/server';
import { checkBuildEnvironment } from '@/lib/build-check';
import { executeQuery } from '@/lib/database';

// Fun√ß√£o para validar t√≠tulos seguindo as regras do marketplace
function validateTitle(title: string): { isValid: boolean; errors: string[] } {
  const errors: string[] = [];
  
  if (!title || title.trim().length === 0) {
    errors.push('T√≠tulo vazio');
    return { isValid: false, errors };
  }
  
  // √öNICA VALIDA√á√ÉO CR√çTICA: Verificar tamanho m√°ximo de 60 caracteres
  if (title.length > 60) {
    errors.push(`T√≠tulo muito longo: ${title.length} caracteres (m√°ximo 60)`);
  }
  
  // Todas as outras valida√ß√µes foram removidas para dar mais flexibilidade
  // A unicidade ser√° verificada na tabela titles
  
  return {
    isValid: errors.length === 0,
    errors: errors
  };
}

// Fun√ß√£o para corrigir problemas comuns nos t√≠tulos
function fixTitleIssues(title: string): string {
  let fixedTitle = title;
  
  // Remover h√≠fens
  fixedTitle = fixedTitle.replace(/-/g, ' ');
  
  // Remover palavras proibidas
  const forbiddenWords = ['Top', 'Promo√ß√£o', 'Mais Barata', 'Frete Gr√°tis', 'Oferta', 'Liquida√ß√£o'];
  forbiddenWords.forEach(word => {
    const regex = new RegExp(word, 'gi');
    fixedTitle = fixedTitle.replace(regex, '');
  });
  
  // Limpar espa√ßos extras
  fixedTitle = fixedTitle.replace(/\s+/g, ' ').trim();
  
  // N√ÉO truncar - se for muito longo, rejeitar completamente
  if (fixedTitle.length > 60) {
    return ''; // Retorna vazio para for√ßar nova tentativa
  }
  
  return fixedTitle;
}

// Fun√ß√£o para calcular o custo da OpenAI baseado no modelo e tokens
function calculateOpenAICost(tokens: number, model: string): number {
  // Pre√ßos por 1K tokens (em USD) - atualizados para 2024
  const pricing: { [key: string]: { input: number; output: number } } = {
    'gpt-4o-mini': { input: 0.00015, output: 0.0006 }, // $0.15/$0.60 per 1M tokens
    'gpt-4o': { input: 0.005, output: 0.015 }, // $5/$15 per 1M tokens
    'gpt-4-turbo': { input: 0.01, output: 0.03 }, // $10/$30 per 1M tokens
    'gpt-3.5-turbo': { input: 0.0005, output: 0.0015 }, // $0.50/$1.50 per 1M tokens
  };

  const modelPricing = pricing[model] || pricing['gpt-4o-mini'];
  
  // Assumir 70% input tokens e 30% output tokens (aproxima√ß√£o)
  const inputTokens = Math.floor(tokens * 0.7);
  const outputTokens = Math.floor(tokens * 0.3);
  
  const inputCost = (inputTokens / 1000) * modelPricing.input;
  const outputCost = (outputTokens / 1000) * modelPricing.output;
  
  return inputCost + outputCost;
}

// Fun√ß√£o para verificar se o t√≠tulo tem palavras cortadas
function hasTruncatedWords(title: string): boolean {
  // Verificar se termina com palavra incompleta (sem espa√ßo no final)
  const trimmed = title.trim();
  if (trimmed.length === 0) return false;
  
  // Verificar se a √∫ltima palavra parece estar cortada
  const words = trimmed.split(' ');
  const lastWord = words[words.length - 1];
  
  // Palavras muito curtas no final podem indicar truncamento
  if (lastWord.length < 3 && words.length > 1) {
    return true;
  }
  
  // Verificar se h√° retic√™ncias ou pontos no final
  if (trimmed.endsWith('...') || trimmed.endsWith('..')) {
    return true;
  }
  
  return false;
}

// Fun√ß√£o para processar os 5 t√≠tulos gerados pela IA
function parseGeneratedTitles(content: string): string[] {
  const titles: string[] = [];
  
  // Dividir por linhas e processar cada uma
  const lines = content.split('\n').map(line => line.trim()).filter(line => line.length > 0);
  
  for (const line of lines) {
    // Procurar por padr√µes como "1. T√≠tulo", "2. T√≠tulo", etc.
    const match = line.match(/^\d+\.\s*(.+)$/);
    if (match) {
      let title = match[1].trim();
      // Remover aspas se houver
      title = title.replace(/^["']|["']$/g, '').trim();
      if (title.length > 0) {
        titles.push(title);
      }
    }
  }
  
  // Se n√£o encontrou t√≠tulos numerados, tentar dividir por linhas simples
  if (titles.length === 0) {
    const simpleTitles = lines.filter(line => 
      line.length > 10 && 
      line.length <= 60 && 
      !line.includes('Exemplo') && 
      !line.includes('FORMATO')
    );
    titles.push(...simpleTitles);
  }
  
  console.log(`üìã Processados ${titles.length} t√≠tulos:`, titles);
  return titles;
}

// Fun√ß√£o para verificar se t√≠tulo j√° existe no banco
async function checkTitleExists(title: string, productId: number, isRegeneration: boolean = false): Promise<boolean> {
  try {
    console.log(`üîç Verificando se t√≠tulo existe: "${title}" (Regenera√ß√£o: ${isRegeneration})`);
    
    // Para regenera√ß√£o, verificar se existe para outros produtos
    // Para t√≠tulo novo, verificar se existe para qualquer produto
    const titlesQuery = isRegeneration 
      ? `SELECT COUNT(*) as count FROM titles WHERE title = ? AND id_product_vtex != ?`
      : `SELECT COUNT(*) as count FROM titles WHERE title = ?`;
      
    const titlesResult = await executeQuery(titlesQuery, isRegeneration ? [title, productId] : [title]);
    const titlesCount = (titlesResult[0] as any).count;
    
    const exists = titlesCount > 0;
    
    console.log(`üìä Resultado da verifica√ß√£o: Titles=${titlesCount}, Existe=${exists} (Regenera√ß√£o: ${isRegeneration})`);
    
    return exists;
  } catch (error) {
    console.log('‚ö†Ô∏è Erro ao verificar duplicata de t√≠tulo:', error);
    return false; // Em caso de erro, assumir que n√£o existe para n√£o bloquear
  }
}

// Fun√ß√£o para detectar nomes pr√≥prios no produto (como "Boyd ST", "Air Max", etc.)
function detectProperNames(productName: string): string[] {
  const properNames: string[] = [];
  
  // Padr√µes comuns de nomes pr√≥prios
  const patterns = [
    // Nomes com ST, LT, PRO, MAX, etc.
    /\b[A-Z][a-z]+ [A-Z]{2,4}\b/g, // "Boyd ST", "Air Max", "Pro LT"
    // Nomes com n√∫meros
    /\b[A-Z][a-z]+ \d+\b/g, // "Air Max 90", "Jordan 1"
    // Nomes compostos com h√≠fen
    /\b[A-Z][a-z]+-[A-Z][a-z]+\b/g, // "Super-Star", "Ultra-Boost"
    // Nomes com apostrofe
    /\b[A-Z][a-z]+'[A-Z][a-z]+\b/g, // "Men's", "Women's"
    // Nomes com ponto
    /\b[A-Z][a-z]+\.[A-Z]{2,4}\b/g, // "Dr. Martens"
    // Nomes com & (e comercial)
    /\b[A-Z][a-z]+ & [A-Z][a-z]+\b/g, // "Tom & Jerry"
  ];
  
  // Aplicar cada padr√£o
  patterns.forEach(pattern => {
    const matches = productName.match(pattern);
    if (matches) {
      properNames.push(...matches);
    }
  });
  
  // Remover duplicatas e filtrar nomes muito gen√©ricos
  const uniqueNames = Array.from(new Set(properNames)).filter(name => {
    const lowerName = name.toLowerCase();
    // Filtrar palavras muito gen√©ricas
    const genericWords = ['the', 'and', 'or', 'of', 'in', 'on', 'at', 'to', 'for', 'with', 'by'];
    return !genericWords.some(word => lowerName.includes(word)) && name.length > 2;
  });
  
  console.log(`üîç Nomes pr√≥prios detectados em "${productName}":`, uniqueNames);
  return uniqueNames;
}

// Fun√ß√£o para gerar t√≠tulo com agente exclusivo baseado na an√°lise de fotografia e dados VTEX
async function generateTitleWithExclusiveAgent(
  product: any,
  imageAnalysis: any,
  skus: any[],
  specifications: any[],
  productId: number,
  openaiApiKey: string,
  agent: any,
  maxAttempts: number = 10,
  isRegeneration: boolean = false
): Promise<{ success: boolean; data?: string; error?: string }> {
  try {
    console.log('üéØ Gerando t√≠tulo com agente exclusivo...');
    console.log(`ü§ñ Usando agente exclusivo: ${agent.name} (ID: ${agent.id})`);
    
    // Detectar nomes pr√≥prios no produto
    const properNames = detectProperNames(product.name);
    console.log(`üè∑Ô∏è Nomes pr√≥prios detectados: ${properNames.length > 0 ? properNames.join(', ') : 'Nenhum'}`);
    
    // Gerar elementos criativos aleat√≥rios
    const creativeElements = {
      styles: ['Moderno', 'Cl√°ssico', 'Esportivo', 'Casual', 'Urbano', 'Elegante', 'Despojado', 'Vintage', 'Minimalista', 'Retr√¥', 'Futurista', 'Bo√™mio', 'Chic', 'Relaxado', 'Din√¢mico', 'Arrojado', 'Sofisticado', 'Descontra√≠do', 'Refinado', 'Contempor√¢neo'],
      qualities: ['Premium', 'Confort√°vel', 'Resistente', 'Leve', 'Macio', 'Dur√°vel', 'Vers√°til', 'Exclusivo', 'Aut√™ntico', 'Sofisticado', 'Pr√°tico', 'Elegante', 'Robusto', 'Suave', 'Flex√≠vel', 'Luxuoso', 'Superior', 'Ideal', 'Perfeito', 'Essencial'],
      occasions: ['Dia a Dia', 'Trabalho', 'Academia', 'Festa', 'Viagem', 'Casa', 'Escrit√≥rio', 'Lazer', 'Eventos', 'Fim de Semana', 'Noite', 'Manh√£', 'Tarde', 'Encontro', 'Reuni√£o', 'Treino', 'Sa√≠da', 'Compromisso'],
      materials: ['Algod√£o', 'Poliamida', 'Elastano', 'Viscose', 'Modal', 'Linho', 'Jersey', 'Malha', 'Tecido', 'Fibra', 'Microfibra', 'Bambu', 'Org√¢nico', 'Sustent√°vel'],
      patterns: ['Liso', 'Listrado', 'Estampado', 'Bordado', 'Grafite', 'Degrad√™', 'Geom√©trico', 'Floral', 'Abstrato', 'Minimalista', 'Cl√°ssico', 'Moderno'],
      emotions: ['Confort√°vel', 'Estiloso', 'Elegante', 'Moderno', 'Cl√°ssico', 'Exclusivo', 'Premium', 'Aut√™ntico', 'Sofisticado', 'Chic', 'Refinado', 'Arrojado'],
      benefits: ['Conforto', 'Estilo', 'Qualidade', 'Durabilidade', 'Versatilidade', 'Eleg√¢ncia', 'Praticidade', 'Modernidade', 'Autenticidade', 'Exclusividade']
    };

    const randomStyle = creativeElements.styles[Math.floor(Math.random() * creativeElements.styles.length)];
    const randomQuality = creativeElements.qualities[Math.floor(Math.random() * creativeElements.qualities.length)];
    const randomOccasion = creativeElements.occasions[Math.floor(Math.random() * creativeElements.occasions.length)];
    const randomEmotion = creativeElements.emotions[Math.floor(Math.random() * creativeElements.emotions.length)];
    const randomBenefit = creativeElements.benefits[Math.floor(Math.random() * creativeElements.benefits.length)];
    const randomMaterial = creativeElements.materials[Math.floor(Math.random() * creativeElements.materials.length)];

    const systemPrompt = agent.system_prompt || `Voc√™ √© um ESPECIALISTA em SEO e marketing para marketplace, focado na cria√ß√£o de t√≠tulos PERFEITOS que maximizem a visibilidade e convers√£o.

üìå ESTRUTURA OBRIGAT√ìRIA IDEAL PARA MARKETPLACE:
[TIPO DE PRODUTO] + [MARCA (OPCIONAL)] + [MODELO/ESTILO] + [CARACTER√çSTICA PRINCIPAL] + [COR (OPCIONAL)] + [P√öBLICO]

üîë REGRAS CR√çTICAS (NUNCA QUEBRAR):
1. M√ÅXIMO 60 caracteres (limite obrigat√≥rio do marketplace)
2. SEMPRE incluir: Tipo de Produto + Modelo/Estilo + Caracter√≠stica + P√∫blico
3. Ordem importa: termo mais buscado vem primeiro (ex: "Camiseta NFL" e n√£o "NFL Camiseta")
4. NUNCA usar h√≠fens (-) no t√≠tulo
5. SEM palavras promocionais proibidas: "Top", "Promo√ß√£o", "Mais Barata", "Frete Gr√°tis"
6. SEM repeti√ß√µes desnecess√°rias de palavras
7. Otimizar para filtros: p√∫blico e tipo devem aparecer para bater com os filtros da plataforma
8. NUNCA cortar ou truncar palavras - todas as palavras devem estar completas
9. Se n√£o couber em 60 caracteres, use sin√¥nimos mais curtos, n√£o corte palavras
10. Marca e Cor s√£o OPCIONAIS - inclua apenas se for relevante e couber no limite de caracteres

üéØ ELEMENTOS ESSENCIAIS:
- Tipo de Produto: Camiseta, Bon√©, Jaqueta, T√™nis, Moletom, Cal√ßa, Short, etc.
- Marca/Licen√ßa: Nike, Adidas, NFL, NBA, Ecko, Onbongo, etc. (se oficial, usar "Original/Oficial")
- Modelo/Estilo: Slim Fit, Casual, Estampada, Polo, Streetwear, Canguru, etc.
- Caracter√≠stica Principal: Algod√£o, Bordado, Manga Longa, Moletom Grosso, etc.
- Cor: sempre em portugu√™s correto ("Bord√¥", n√£o "Bordo")
- P√∫blico: Masculina, Feminina, Unissex, Juvenil, Infantil

‚úÖ EXEMPLOS DE T√çTULOS PERFEITOS:
- "Camiseta NFL Masculina Estampada Original Oficial"
- "Bon√© Ecko Aba Curva Preto Snapback Unissex Original"
- "Moletom Canguru Masculino Casual Premium Confort√°vel"
- "T√™nis Air Max Masculino Original Esportivo Moderno"
- "Jaqueta Feminina Casual Oficial Elegante"
- "Camiseta Polo Masculina B√°sica Cl√°ssica Premium"
- "Cal√ßa Jeans Masculina Reta Original Denim"

üéØ ELEMENTOS CRIATIVOS PARA ESTA TENTATIVA:
- Estilo Foco: ${randomStyle}
- Qualidade Destaque: ${randomQuality}
- Ocasi√£o: ${randomOccasion}
- Emo√ß√£o: ${randomEmotion}
- Benef√≠cio: ${randomBenefit}
- Material: ${randomMaterial}

üí° VOCABUL√ÅRIO CRIATIVO EXPANDIDO:
- Estilos: ${creativeElements.styles.join(', ')}
- Qualidades: ${creativeElements.qualities.join(', ')}
- Ocasi√µes: ${creativeElements.occasions.join(', ')}
- Materiais: ${creativeElements.materials.join(', ')}
- Padr√µes: ${creativeElements.patterns.join(', ')}

üöÄ T√âCNICAS CRIATIVAS:
- Use sin√¥nimos criativos (Camiseta = Blusa, Top, Camisa)
- Varie a ordem das palavras
- Adicione emo√ß√µes (Confort√°vel, Estiloso, Elegante)
- Use palavras de a√ß√£o (Para, Ideal, Perfeito)
- Inclua benef√≠cios (Conforto, Estilo, Qualidade)

FORMATO DE RESPOSTA:
Retorne APENAS o t√≠tulo, sem aspas, sem explica√ß√µes, sem formata√ß√£o adicional.`;

    for (let attempt = 1; attempt <= maxAttempts; attempt++) {
      console.log(`üîÑ Tentativa ${attempt}/${maxAttempts} de gera√ß√£o de t√≠tulo...`);
      
      // Gerar varia√ß√µes criativas para esta tentativa
      const creativeVariations = {
        approaches: [
          'Foque no CONFORTO e QUALIDADE',
          'Destaque o ESTILO e ELEG√ÇNCIA', 
          'Enfatize a VERSATILIDADE',
          'Destaque a DURABILIDADE',
          'Foque na MODERNIDADE',
          'Enfatize a AUTENTICIDADE'
        ],
        structures: [
          'CATEGORIA + MARCA + G√äNERO + QUALIDADE + COR',
          'CATEGORIA + MARCA + G√äNERO + ESTILO + COR',
          'CATEGORIA + MARCA + G√äNERO + MATERIAL + COR',
          'CATEGORIA + MARCA + G√äNERO + BENEF√çCIO + COR',
          'CATEGORIA + MARCA + G√äNERO + OCASI√ÉO + COR'
        ],
        emotions: ['Confort√°vel', 'Estiloso', 'Elegante', 'Moderno', 'Cl√°ssico', 'Exclusivo', 'Premium', 'Aut√™ntico'],
        actions: ['Para', 'Ideal', 'Perfeito', 'Essencial', 'Indispens√°vel', 'Obrigat√≥rio']
      };

      const randomApproach = creativeVariations.approaches[Math.floor(Math.random() * creativeVariations.approaches.length)];
      const randomStructure = creativeVariations.structures[Math.floor(Math.random() * creativeVariations.structures.length)];
      const randomEmotion = creativeVariations.emotions[Math.floor(Math.random() * creativeVariations.emotions.length)];
      const randomAction = creativeVariations.actions[Math.floor(Math.random() * creativeVariations.actions.length)];

      const userPrompt = `Gere 5 t√≠tulos diferentes para este produto:

=== AN√ÅLISE DA FOTOGRAFIA ===
${imageAnalysis ? imageAnalysis.contextualizacao : 'Nenhuma an√°lise de imagem dispon√≠vel'}

=== DADOS DO PRODUTO ===
Nome Original: ${product.name}
Marca: ${product.brand_name || 'N/A'}
Categoria: ${product.category_name || 'N/A'}
Ref ID: ${product.ref_id || 'N/A'}

=== NOMES PR√ìPRIOS DETECTADOS ===
${properNames.length > 0 ? properNames.map(name => `- ${name}`).join('\n') : 'Nenhum nome pr√≥prio detectado'}

=== ESPECIFICA√á√ïES T√âCNICAS ===
${specifications.length > 0 ? specifications.map((spec, index) => `
${index + 1}. ${spec.field_name}: ${spec.field_value_ids || 'N/A'} ${spec.field_group_name ? `(Grupo: ${spec.field_group_name})` : ''}
`).join('') : 'Nenhuma especifica√ß√£o encontrada'}

=== DADOS DOS SKUs ===
${skus.length > 0 ? skus.map((sku, index) => `
SKU ${index + 1}: ${sku.sku_name || 'N/A'} - ${sku.name || 'N/A'}
`).join('') : 'Nenhum SKU encontrado'}

=== INSTRU√á√ïES ===
- Gere EXATAMENTE 5 t√≠tulos diferentes
- Cada t√≠tulo deve ter no m√°ximo 60 caracteres
- Inclua pelo menos: [tipo de pe√ßa], [marca], [p√∫blico-alvo], [cor]
- Varie a ordem, estilo e palavras-chave
- Seja criativo mas n√£o invente informa√ß√µes
- ${properNames.length > 0 ? `IMPORTANTE: SEMPRE preserve os nomes pr√≥prios detectados: ${properNames.join(', ')}` : ''}
- Tentativa ${attempt} de ${maxAttempts}

FORMATO DE RESPOSTA:
1. [primeiro t√≠tulo]
2. [segundo t√≠tulo]
3. [terceiro t√≠tulo]
4. [quarto t√≠tulo]
5. [quinto t√≠tulo]`;

      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${openaiApiKey}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: agent.model || 'gpt-4o-mini',
          messages: [
            { role: 'system', content: systemPrompt },
            { role: 'user', content: userPrompt }
          ],
          max_tokens: 100,
          temperature: Math.min(parseFloat(agent.temperature) + (attempt * 0.15) + 0.2, 0.9),
          stream: false
        }),
      });

      if (!response.ok) {
        const errorData = await response.text();
        console.error(`‚ùå Erro na API OpenAI (tentativa ${attempt}):`, response.status, errorData);
        if (attempt === maxAttempts) {
          throw new Error(`Erro na API OpenAI: ${response.status}`);
        }
        continue;
      }

      const responseData = await response.json();
      const content = responseData.choices[0]?.message?.content;
      
      if (!content) {
        console.log(`‚ùå Resposta vazia na tentativa ${attempt}`);
        if (attempt === maxAttempts) {
          throw new Error('Resposta vazia da OpenAI');
        }
        continue;
      }

      console.log(`üìù Conte√∫do gerado (tentativa ${attempt}):`, content);

      // Processar os 5 t√≠tulos gerados
      const titles = parseGeneratedTitles(content);
      if (titles.length === 0) {
        console.log(`‚ùå Nenhum t√≠tulo v√°lido encontrado na tentativa ${attempt}, tentando novamente...`);
        continue;
      }

      console.log(`üìã ${titles.length} t√≠tulos processados na tentativa ${attempt}`);

      // Tentar cada t√≠tulo at√© encontrar um v√°lido e √∫nico
      for (let i = 0; i < titles.length; i++) {
        const title = titles[i];
        console.log(`üîç Testando t√≠tulo ${i + 1}/${titles.length}: "${title}" (${title.length} caracteres)`);

        // VALIDA√á√ÉO: Verificar se o t√≠tulo segue as regras do marketplace
        const validation = validateTitle(title);
        if (!validation.isValid) {
          console.log(`‚ùå T√≠tulo ${i + 1} inv√°lido (${validation.errors.join(', ')})`);
          continue;
        }
        
        // VALIDA√á√ÉO: Verificar unicidade no banco
        const exists = await checkTitleExists(title, productId, isRegeneration);
        if (exists) {
          console.log(`‚ùå T√≠tulo ${i + 1} j√° existe no banco`);
          continue;
        }

        // Se chegou at√© aqui, o t√≠tulo √© v√°lido e √∫nico
        console.log(`‚úÖ T√≠tulo ${i + 1} v√°lido e √∫nico encontrado: "${title}"`);
        return {
          success: true,
          data: title
        };
      }

      console.log(`‚ùå Nenhum dos ${titles.length} t√≠tulos foi v√°lido na tentativa ${attempt}, tentando novamente...`);
    }
    
    // Se chegou aqui, todas as tentativas falharam
    throw new Error(`N√£o foi poss√≠vel gerar t√≠tulo v√°lido ap√≥s ${maxAttempts} tentativas`);

  } catch (error: any) {
    console.error('‚ùå Erro ao gerar t√≠tulo com agente exclusivo:', error);
    return {
      success: false,
      error: error.message
    };
  }
}

// Fun√ß√£o para salvar t√≠tulo na tabela titles
async function saveTitleToTitlesTable(
  productId: number,
  title: string,
  originalTitle: string,
  openaiModel: string,
  tokensUsed: number,
  tokensPrompt: number,
  tokensCompletion: number,
  cost: number,
  requestId: string,
  responseTime: number,
  maxTokens: number,
  temperature: number,
  generationAttempts: number,
  isUnique: boolean,
  validationPassed: boolean
): Promise<{ success: boolean; data?: any; error?: string }> {
  try {
    const insertQuery = `
      INSERT INTO titles (
        id_product_vtex, title, original_title, openai_model,
        openai_tokens_used, openai_tokens_prompt, openai_tokens_completion,
        openai_cost, openai_request_id, openai_response_time_ms,
        openai_max_tokens, openai_temperature, generation_attempts,
        is_unique, validation_passed, status
      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'validated')
      ON DUPLICATE KEY UPDATE
        title = VALUES(title),
        original_title = VALUES(original_title),
        openai_model = VALUES(openai_model),
        openai_tokens_used = openai_tokens_used + VALUES(openai_tokens_used),
        openai_tokens_prompt = openai_tokens_prompt + VALUES(openai_tokens_prompt),
        openai_tokens_completion = openai_tokens_completion + VALUES(openai_tokens_completion),
        openai_cost = openai_cost + VALUES(openai_cost),
        openai_request_id = VALUES(openai_request_id),
        openai_response_time_ms = VALUES(openai_response_time_ms),
        openai_max_tokens = VALUES(openai_max_tokens),
        openai_temperature = VALUES(openai_temperature),
        generation_attempts = VALUES(generation_attempts),
        is_unique = VALUES(is_unique),
        validation_passed = VALUES(validation_passed),
        status = 'validated',
        updated_at = NOW()
    `;

    const result = await executeQuery(insertQuery, [
      productId,
      title,
      originalTitle,
      openaiModel,
      tokensUsed,
      tokensPrompt,
      tokensCompletion,
      cost,
      requestId,
      responseTime,
      maxTokens,
      temperature,
      generationAttempts,
      isUnique,
      validationPassed
    ]);

    console.log('‚úÖ T√≠tulo salvo na tabela titles para produto ID:', productId);

    return {
      success: true,
      data: {
        id: (result as any).insertId,
        productId,
        title
      }
    };

  } catch (error: any) {
    console.error('‚ùå Erro ao salvar t√≠tulo:', error);
    
    return {
      success: false,
      error: error.message
    };
  }
}

export async function POST(request: NextRequest) {
  try {
    // Evitar execu√ß√£o durante o build do Next.js
    if (checkBuildEnvironment()) {
      return NextResponse.json({ error: 'API n√£o dispon√≠vel durante build' }, { status: 503 });
    }

    
    let body;
    try {
      body = await request.json();
    } catch (parseError) {
      console.error('‚ùå Erro ao fazer parse do JSON:', parseError);
      return NextResponse.json({
        success: false,
        message: 'Erro ao processar dados da requisi√ß√£o'
      }, { status: 400 });
    }
    
    const { productId, forceRegenerate = false } = body;

    if (!productId) {
      console.log('‚ùå productId n√£o fornecido');
      return NextResponse.json({
        success: false,
        message: 'productId √© obrigat√≥rio'
      }, { status: 400 });
    }

    // Validar se productId √© um n√∫mero
    const numericProductId = parseInt(productId);
    if (isNaN(numericProductId)) {
      console.log('‚ùå productId inv√°lido:', productId);
      return NextResponse.json({
        success: false,
        message: 'productId deve ser um n√∫mero v√°lido'
      }, { status: 400 });
    }


    // 1. Buscar dados completos do produto
    let products;
    try {
      const productQuery = `
        SELECT 
          p.*,
          b.name as brand_name,
          b.contexto as brand_context,
          c.name as category_name
        FROM products_vtex p
        LEFT JOIN brands_vtex b ON p.id_brand_vtex = b.id_brand_vtex
        LEFT JOIN categories_vtex c ON p.id_category_vtex = c.id_category_vtex
        WHERE p.id_produto_vtex = ?
      `;

      products = await executeQuery(productQuery, [numericProductId]);
    } catch (dbError) {
      console.error('‚ùå Erro ao buscar produto no banco:', dbError);
      return NextResponse.json({
        success: false,
        message: 'Erro ao buscar produto no banco de dados'
      }, { status: 500 });
    }
    
    if (!products || products.length === 0) {
      console.log('‚ùå Produto n√£o encontrado');
      return NextResponse.json({
        success: false,
        message: 'Produto n√£o encontrado'
      }, { status: 404 });
    }

    const product = products[0];
    console.log('üì¶ Produto encontrado:', product.name);

    // 2. Buscar SKUs do produto
    console.log('üîç Buscando SKUs do produto...');
    let skus = [];
    try {
      const skuQuery = `
        SELECT 
          s.*,
          s.name as sku_name
        FROM skus_vtex s
        WHERE s.id_produto_vtex = ?
      `;
      
      skus = await executeQuery(skuQuery, [numericProductId]);
      console.log('üìä SKUs encontrados:', skus?.length || 0);
    } catch (error) {
      console.log('‚ö†Ô∏è Erro ao buscar SKUs:', error);
      skus = [];
    }

    // 3. Especifica√ß√µes n√£o dispon√≠veis (tabela n√£o existe)
    console.log('‚ö†Ô∏è Especifica√ß√µes n√£o dispon√≠veis - tabela product_specifications n√£o existe');
    const specifications: any[] = [];

    // 4. Buscar an√°lise de imagens mais recente
    let imageAnalysis = null;
    try {
      console.log('üîç Buscando an√°lise de imagens...');
      
      // Buscar da tabela analise_imagens (tabela correta)
      const analysisQuery = `
        SELECT 
          ai.*,
          ai.agent_name,
          ai.contextualizacao as contextual_analysis
        FROM analise_imagens ai
        WHERE ai.id_produto_vtex = ?
        ORDER BY ai.created_at DESC
        LIMIT 1
      `;
      
      const analyses = await executeQuery(analysisQuery, [numericProductId]);
      
      if (analyses && analyses.length > 0) {
        imageAnalysis = analyses[0];
      } else {
        return NextResponse.json({
          success: false,
          message: 'Nenhuma an√°lise de imagem encontrada. Execute a an√°lise de imagem primeiro.'
        }, { status: 400 });
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Erro ao buscar an√°lise de imagens:', error);
      return NextResponse.json({
        success: false,
        message: 'Erro ao buscar an√°lise de imagens'
      }, { status: 500 });
    }

    // 5. Verificar se j√° existe t√≠tulo (se n√£o for regenera√ß√£o for√ßada)
    if (!forceRegenerate) {
      console.log('üîç Verificando se j√° existe t√≠tulo...');
      try {
        const existingQuery = `SELECT title FROM titles WHERE id_product_vtex = ? AND status = 'validated'`;
        const existing = await executeQuery(existingQuery, [numericProductId]);
        console.log('üìä T√≠tulos existentes:', existing?.length || 0);
        
        if (existing && existing.length > 0) {
          console.log('‚úÖ T√≠tulo j√° existe, retornando...');
          return NextResponse.json({
            success: true,
            data: {
              title: existing[0].title,
              message: 'T√≠tulo j√° existe'
            }
          });
        }
      } catch (error) {
        console.log('‚ö†Ô∏è Erro ao verificar t√≠tulos existentes:', error);
        // Continuar com a gera√ß√£o mesmo se houver erro na verifica√ß√£o
      }
    } else {
      console.log('üîÑ Regenera√ß√£o for√ßada - removendo t√≠tulos existentes...');
      try {
        // Remover t√≠tulos existentes para for√ßar nova gera√ß√£o
        const deleteQuery = `DELETE FROM titles WHERE id_product_vtex = ?`;
        await executeQuery(deleteQuery, [numericProductId]);
        console.log('üóëÔ∏è T√≠tulos existentes removidos para regenera√ß√£o');
      } catch (error) {
        console.log('‚ö†Ô∏è Erro ao remover t√≠tulos existentes:', error);
        // Continuar mesmo com erro
      }
    }

    // 6. Verificar se a chave da OpenAI est√° configurada
    const openaiApiKey = process.env.OPENAI_API_KEY;
    if (!openaiApiKey || openaiApiKey.trim() === '') {
      console.log('‚ö†Ô∏è Chave da OpenAI n√£o configurada no .env');
      return NextResponse.json({
        success: false,
        message: 'Chave da API OpenAI n√£o configurada. Configure OPENAI_API_KEY no arquivo .env.'
      }, { status: 500 });
    }

    // 6. Configurar agente hardcoded para t√≠tulos
    console.log('ü§ñ Configurando agente hardcoded para t√≠tulos...');
    const agent = {
      id: 1,
      name: 'Agente de Gera√ß√£o de T√≠tulos',
      system_prompt: `Voc√™ √© um especialista em SEO e naming criativo para e-commerce de moda.  
Sua miss√£o √© gerar t√≠tulos curtos, atrativos e otimizados para produtos de roupas.

‚ö†Ô∏è Regras:
- Cada t√≠tulo deve ter no m√°ximo **60 caracteres**.  
- Sempre gerar exatamente **5 op√ß√µes diferentes**.  
- O t√≠tulo deve conter pelo menos: [tipo de pe√ßa], [marca], [p√∫blico-alvo], [cor].  
- Pode variar ordem, estilo e palavras-chave (ex: casual, streetwear, slim fit, original, algod√£o).  
- Seja criativo, mas n√£o invente informa√ß√µes que n√£o foram dadas.  
- Os t√≠tulos devem ser diretos, claros e f√°ceis de entender.  

üè∑Ô∏è REGRA CR√çTICA - PRESERVA√á√ÉO DE NOMES PR√ìPRIOS:
- SEMPRE identifique e preserve nomes pr√≥prios do produto original (ex: "Boyd ST", "Air Max", "Pro LT", "Jordan 1")
- Nomes pr√≥prios s√£o combina√ß√µes como: [Palavra] + [Sigla] (Boyd ST), [Palavra] + [N√∫mero] (Air Max 90), [Palavra] + [Palavra] (Super Star)
- Se detectar nomes pr√≥prios, SEMPRE inclu√≠-los nos t√≠tulos gerados
- Nomes pr√≥prios s√£o parte da identidade do produto e devem ser mantidos

### Exemplo com nome pr√≥prio:
Entrada: "Meia Stance Boyd ST Branca"
Sa√≠da:
1. Meia Stance Boyd ST Branca Masculina
2. Meia Masculina Stance Boyd ST Branca  
3. Meia Stance Boyd ST Branca Original
4. Meia Boyd ST Stance Branca Masculina
5. Meia Masculina Boyd ST Stance Branca

### Exemplo sem nome pr√≥prio:
Entrada: "Camiseta Stance Masculina Casual Algod√£o Verde Militar"
Sa√≠da:
1. Camiseta Masculina Stance Verde Militar Algod√£o  
2. Camiseta Stance Casual Masculina Verde Militar  
3. Camiseta Masculina Stance Algod√£o Verde Militar  
4. Camiseta Stance Verde Militar Masculina Original  
5. Camiseta Masculina Stance Streetwear Verde Militar

FORMATO DE RESPOSTA OBRIGAT√ìRIO:
Retorne EXATAMENTE 5 t√≠tulos numerados (1. 2. 3. 4. 5.), um por linha, sem explica√ß√µes adicionais.`,
      model: 'gpt-4o-mini',
      max_tokens: 100,
      temperature: 0.3
    };
    
    console.log(`ü§ñ Agente hardcoded configurado: ${agent.name}`);

    // 7. Gerar t√≠tulo com agente exclusivo
    console.log('üéØ Gerando t√≠tulo com agente exclusivo...');
    const titleStartTime = Date.now();
    const titleResponse = await generateTitleWithExclusiveAgent(
      product, 
      imageAnalysis, 
      skus, 
      specifications, 
      numericProductId, 
      openaiApiKey,
      agent,
      10, // maxAttempts
      forceRegenerate // isRegeneration
    );
    const titleGenerationTime = Date.now() - titleStartTime;
    console.log(`üéØ T√≠tulo gerado (${titleGenerationTime}ms):`, titleResponse.success ? 'Sucesso' : 'Erro');
    
    if (!titleResponse.success) {
      console.log('‚ùå Erro na gera√ß√£o do t√≠tulo:', titleResponse.error);
      return NextResponse.json({
        success: false,
        message: titleResponse.error || 'Erro ao gerar t√≠tulo com agente exclusivo'
      }, { status: 500 });
    }

    const generatedTitle = titleResponse.data!;
    console.log('‚úÖ T√≠tulo gerado com agente exclusivo:', generatedTitle);

    // 8. Salvar t√≠tulo no banco de dados
    console.log('üíæ Salvando t√≠tulo no banco de dados...');
    const saveResult = await saveTitleToTitlesTable(
      numericProductId,
      generatedTitle,
      product.name, // T√≠tulo original
      agent.model || 'gpt-4o-mini',
      0, // Tokens (ser√° calculado se necess√°rio)
      0, // Tokens prompt
      0, // Tokens completion
      0, // Custo (ser√° calculado se necess√°rio)
      '', // Request ID
      titleGenerationTime,
      (agent.max_tokens as number) || 100,
      (agent.temperature as number) || 0.3,
      1, // Tentativas de gera√ß√£o
      true, // √â √∫nico
      true // Valida√ß√£o passou
    );

    if (!saveResult.success) {
      console.log('‚ùå Erro ao salvar t√≠tulo:', saveResult.error);
      return NextResponse.json({
        success: false,
        message: 'Erro ao salvar t√≠tulo no banco de dados'
      }, { status: 500 });
    }

    console.log('‚úÖ T√≠tulo gerado e salvo com sucesso!');
    return NextResponse.json({
      success: true,
      data: {
        title: generatedTitle,
        productId: numericProductId,
        generationTime: titleGenerationTime
      }
    });

  } catch (error: any) {
    console.error('‚ùå Erro ao gerar t√≠tulo:', error);
    
    return NextResponse.json({
      success: false,
      message: 'Erro interno do servidor ao gerar t√≠tulo',
      error: error.message
    }, { status: 500 });
  }
}
