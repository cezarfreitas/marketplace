import { NextRequest, NextResponse } from 'next/server';
import { checkBuildEnvironment } from '@/lib/build-check';
import { executeQuery } from '@/lib/database';

// Fun√ß√£o auxiliar para salvar logs de sincroniza√ß√£o - VERS√ÉO SIMPLIFICADA
async function saveSyncLog(productId: number, anymarketId: string, title: string, description: string, success: boolean, responseData: any, errorMessage?: string, syncType: string = 'info', action: string = 'update') {
  try {
    // Verificar se a tabela anymarket_sync_logs existe
    const tableCheck = await executeQuery(`
      SELECT TABLE_NAME 
      FROM INFORMATION_SCHEMA.TABLES 
      WHERE TABLE_SCHEMA = DATABASE() 
      AND TABLE_NAME = 'anymarket_sync_logs'
    `);
    
    if (tableCheck.length === 0) {
      console.log('‚ö†Ô∏è Tabela anymarket_sync_logs n√£o existe - pulando log');
      return;
    }
    
    // Estrutura limpa e correta
    const logQuery = `
      INSERT INTO anymarket_sync_logs (id_produto_vtex, id_produto_any, title, description, sync_type, action, response_data, error_message, created_at)
      VALUES (?, ?, ?, ?, ?, ?, ?, ?, NOW())
    `;
    const values = [
      productId,
      anymarketId,
      title,
      description,
      syncType,
      action,
      JSON.stringify(responseData),
      errorMessage || null
    ];
    
    await executeQuery(logQuery, values);
    console.log('‚úÖ Log de sincroniza√ß√£o salvo com sucesso');
  } catch (error) {
    console.error('‚ùå Erro ao salvar log de sincroniza√ß√£o:', error);
    // N√£o relan√ßar o erro para n√£o interromper o processo principal
  }
}

/**
 * Converte texto puro em HTML formatado para a Anymarket
 */
function convertTextToHtml(text: string): string {
  if (!text) return text;
  
  // Se j√° cont√©m HTML, retorna como est√°
  if (text.includes('<')) return text;
  
  // Dividir em se√ß√µes baseado nos t√≠tulos em mai√∫sculo
  const sections = text.split(/([A-Z][A-Z\s]+[A-Z])/);
  let html = '';
  
  for (let i = 0; i < sections.length; i++) {
    const section = sections[i].trim();
    
    if (!section) continue;
    
    // Se √© um t√≠tulo em mai√∫sculo (se√ß√£o)
    if (section.match(/^[A-Z][A-Z\s]+[A-Z]$/)) {
      html += `<b>${section}</b><br>`;
    } else {
      // Processar o conte√∫do da se√ß√£o
      let content = section;
      
      // Converter quebras de linha duplas em <br><br>
      content = content.replace(/\n\n/g, '<br><br>');
      
      // Converter quebras de linha simples em <br>
      content = content.replace(/\n/g, '<br>');
      
      // Converter perguntas em negrito (PERGUNTA:)
      content = content.replace(/(PERGUNTA:\s*[^<]+)/g, '<b>$1</b>');
      
      // Converter respostas (Resposta:)
      content = content.replace(/(Resposta:\s*[^<]+)/g, '<b>$1</b>');
      
      html += content + '<br><br>';
    }
  }
  
  // Limpar <br> extras no final
  html = html.replace(/(<br>)+$/, '');
  
  return html;
}

/**
 * API para atualizar produto no Anymarket
 * 
 * PROCESSO:
 * 1. Buscar t√≠tulo gerado da tabela titles (product_id VTEX ‚Üí titles.id_product_vtex VTEX)
 * 2. Buscar descri√ß√£o gerada da tabela descriptions (product_id VTEX ‚Üí descriptions.id_product_vtex VTEX)
 * 3. ETAPA 1: Buscar dados atuais do produto no Anymarket (GET) - usa anymarketId na URL
 * 4. ETAPA 2: Enviar payload espec√≠fico com t√≠tulo e descri√ß√£o atualizados (PUT) - usa anymarketData.id na URL e payload
 * 
 * RELACIONAMENTOS:
 * - productId: ID do produto VTEX (vem do modal)
 * - titles.id_product_vtex: ID do produto VTEX (mesmo valor)
 * - descriptions.id_product_vtex: ID do produto VTEX (mesmo valor)
 * - anymarketId: ID do produto no Anymarket (vem do modal)
 * 
 * PAYLOAD ETAPA 2 (CAMPOS ESPEC√çFICOS):
 * - APENAS estes campos podem ser enviados na Etapa 2
 * - Substitui os campos "title" e "description" com valores das tabelas titles e descriptions
 * - Todos os outros campos v√™m APENAS do payload da primeira etapa (anymarketData)
 * - ID: usa anymarketData.id (j√° obtido na primeira etapa)
 * - CAMPOS PERMITIDOS:
 *   * id, title, description, category, brand, model, gender (da primeira etapa)
 *   * warrantyTime: 1, warrantyText: "Garantia de F√°brica", priceFactor: 1 (valores fixos)
 */

export async function POST(request: NextRequest) {
  try {
    // Evitar execu√ß√£o durante o build do Next.js
    if (checkBuildEnvironment()) {
      return NextResponse.json({ error: 'API n√£o dispon√≠vel durante build' }, { status: 503 });
    }

    const { productId, anymarketId } = await request.json();

    if (!productId || !anymarketId) {
      return NextResponse.json({
        success: false,
        message: 'productId e anymarketId s√£o obrigat√≥rios'
      }, { status: 400 });
    }

    // Validar formato do anymarketId
    if (typeof anymarketId !== 'string' && typeof anymarketId !== 'number') {
      return NextResponse.json({
        success: false,
        message: 'anymarketId deve ser uma string ou n√∫mero'
      }, { status: 400 });
    }

    console.log('üîÑ Iniciando processo direto: buscar e atualizar t√≠tulos...');
    console.log('üìã Product ID:', productId, 'Anymarket ID:', anymarketId, 'Type:', typeof anymarketId);

    // 1. Buscar t√≠tulo e descri√ß√£o gerados
    // RELACIONAMENTO: product_id (VTEX) ‚Üí titles.id_product_vtex (VTEX) e descriptions.id_product_vtex (VTEX)
    console.log('üîç Buscando t√≠tulo e descri√ß√£o gerados...');
    console.log('üîó Relacionamento: product_id (VTEX):', productId, '‚Üí titles.id_product_vtex (VTEX) e descriptions.id_product_vtex (VTEX)');
    
    // Buscar t√≠tulo
    const titleQuery = `
      SELECT title 
      FROM titles 
      WHERE id_product_vtex = ? 
        AND status = 'validated' 
      ORDER BY created_at DESC 
      LIMIT 1
    `;
    
    const titleResult = await executeQuery(titleQuery, [productId]);
    
    if (!titleResult || titleResult.length === 0) {
      return NextResponse.json({
        success: false,
        message: 'Nenhum t√≠tulo gerado encontrado para este produto'
      }, { status: 404 });
    }
    
    const newTitle = titleResult[0].title;
    console.log('üìù T√≠tulo gerado encontrado:', newTitle);

    // Buscar descri√ß√£o
    const descriptionQuery = `
      SELECT description 
      FROM descriptions 
      WHERE id_product_vtex = ? 
        AND status = 'generated' 
      ORDER BY created_at DESC 
      LIMIT 1
    `;
    
    const descriptionResult = await executeQuery(descriptionQuery, [productId]);
    
    let newDescription = null;
    if (descriptionResult && descriptionResult.length > 0) {
      newDescription = descriptionResult[0].description;
      console.log('üìÑ Descri√ß√£o gerada encontrada:', newDescription.substring(0, 100) + '...');
      
      // Converter texto puro para HTML se necess√°rio
      if (newDescription && !newDescription.includes('<')) {
        console.log('üîÑ Convertendo descri√ß√£o de texto puro para HTML...');
        newDescription = convertTextToHtml(newDescription);
        console.log('‚úÖ Descri√ß√£o convertida para HTML');
      }
    } else {
      console.log('‚ö†Ô∏è Nenhuma descri√ß√£o gerada encontrada para este produto');
    }

    // Buscar caracter√≠sticas do produto
    console.log('üîç Buscando caracter√≠sticas do produto...');
    const characteristicsQuery = `
      SELECT 
        rc.caracteristica,
        rc.resposta
      FROM respostas_caracteristicas rc
      WHERE rc.produto_id = ? 
        AND rc.resposta IS NOT NULL 
        AND rc.resposta != ''
        AND TRIM(rc.resposta) != ''
      ORDER BY rc.caracteristica ASC
    `;
    
    const characteristicsResult = await executeQuery(characteristicsQuery, [productId]);
    let productCharacteristics: any[] = [];
    
    if (characteristicsResult && characteristicsResult.length > 0) {
      productCharacteristics = characteristicsResult.map((char, index) => ({
        index: index + 1,
        name: char.caracteristica,
        value: char.resposta
      }));
      console.log(`‚úÖ ${productCharacteristics.length} caracter√≠sticas encontradas:`, productCharacteristics.map(c => c.name).join(', '));
      console.log('üìã Caracter√≠sticas detalhadas:', productCharacteristics);
    } else {
      console.log('‚ö†Ô∏è Nenhuma caracter√≠stica encontrada para este produto');
      console.log('üîç Query executada:', characteristicsQuery);
      console.log('üîç Product ID usado:', productId);
    }

    // 2. Buscar dados atuais do produto no Anymarket (ETAPA 1)
    console.log('üîç ETAPA 1: Buscando dados atuais do produto no Anymarket...');
    const anymarketUrl = `https://api.anymarket.com.br/v2/products/${anymarketId}`;
    console.log('üåê URL da requisi√ß√£o:', anymarketUrl);
    console.log('üîç anymarketId na URL:', anymarketId, 'Tipo:', typeof anymarketId);
    
    const getResponse = await fetch(anymarketUrl, {
      method: 'GET',
      headers: {
        'gumgaToken': process.env.ANYMARKET || '',
        'Content-Type': 'application/json',
        'User-Agent': 'Meli-Integration/1.0',
        'Accept': 'application/json'
      },
      cache: 'no-store'
    });

    if (!getResponse.ok) {
      const errorData = await getResponse.json();
      console.error('‚ùå Erro ao buscar dados atuais:', errorData);
      return NextResponse.json({
        success: false,
        message: 'Erro ao buscar dados atuais do produto: ' + (errorData.message || 'Erro desconhecido'),
        error: errorData
      }, { status: getResponse.status });
    }

    const anymarketData = await getResponse.json();
    console.log('‚úÖ ETAPA 1 CONCLU√çDA: Dados do Anymarket obtidos');
    console.log('üìã ID do produto no Anymarket:', anymarketData.id, 'Tipo:', typeof anymarketData.id);

    // 3. Verificar se t√≠tulo, descri√ß√£o ou caracter√≠sticas precisam ser atualizados
    const updates = [];
    let needsUpdate = false;
    
    // Verificar t√≠tulo
    if (anymarketData.title !== newTitle) {
      console.log(`üìù T√≠tulo ser√° atualizado: "${anymarketData.title}" ‚Üí "${newTitle}"`);
      updates.push({
        field: 'T√≠tulo do Produto',
        oldValue: anymarketData.title,
        newValue: newTitle
      });
      needsUpdate = true;
    } else {
      console.log('‚ÑπÔ∏è T√≠tulo j√° est√° sincronizado');
    }

    // Verificar descri√ß√£o (apenas se existe descri√ß√£o gerada)
    if (newDescription && anymarketData.description !== newDescription) {
      console.log(`üìÑ Descri√ß√£o ser√° atualizada`);
      console.log(`üìÑ Descri√ß√£o atual (${anymarketData.description.length} chars): ${anymarketData.description.substring(0, 100)}...`);
      console.log(`üìÑ Nova descri√ß√£o (${newDescription.length} chars): ${newDescription.substring(0, 100)}...`);
      updates.push({
        field: 'Descri√ß√£o do Produto',
        oldValue: anymarketData.description,
        newValue: newDescription
      });
      needsUpdate = true;
    } else if (newDescription) {
      console.log('‚ÑπÔ∏è Descri√ß√£o j√° est√° sincronizada');
    } else {
      console.log('‚ÑπÔ∏è Nenhuma descri√ß√£o gerada encontrada - mantendo descri√ß√£o atual');
    }

    // Verificar caracter√≠sticas
    if (productCharacteristics.length > 0) {
      console.log(`üîß ${productCharacteristics.length} caracter√≠sticas ser√£o enviadas`);
      updates.push({
        field: 'Caracter√≠sticas do Produto',
        oldValue: 'N/A',
        newValue: `${productCharacteristics.length} caracter√≠sticas`
      });
      needsUpdate = true;
    } else {
      console.log('‚ÑπÔ∏è Nenhuma caracter√≠stica encontrada para enviar');
    }

    // Se n√£o h√° atualiza√ß√µes necess√°rias
    if (!needsUpdate) {
      return NextResponse.json({
        success: true,
        message: 'T√≠tulo, descri√ß√£o e caracter√≠sticas j√° est√£o sincronizados - nenhuma atualiza√ß√£o necess√°ria',
        data: {
          anymarket_id: anymarketId,
          action: 'no_updates_needed',
          updates: [],
          response: anymarketData
        }
      });
    }

    // 4. ETAPA 2: Preparar payload espec√≠fico para PUT
    // IMPORTANTE: APENAS os campos espec√≠ficos permitidos podem ser enviados
    // Valores v√™m APENAS do payload da primeira etapa (anymarketData)
    // VALORES FIXOS OBRIGAT√ìRIOS: warrantyTime=1, warrantyText="Garantia de F√°brica", priceFactor=1
    console.log('üîÑ ETAPA 2: Preparando payload espec√≠fico para PUT...');
    
    // Extrair valor da caracter√≠stica "modelo" diretamente da tabela respostas_caracteristicas
    let modeloValue = anymarketData.model; // valor padr√£o
    console.log('üîç Valor padr√£o do model:', modeloValue);
    
    // Buscar caracter√≠sticas diretamente da tabela respostas_caracteristicas
    const modelCharacteristicsQuery = `
      SELECT caracteristica, resposta 
      FROM respostas_caracteristicas 
      WHERE produto_id = ?
    `;
    
    const characteristicsData = await executeQuery(modelCharacteristicsQuery, [productId]);
    console.log('üìã Caracter√≠sticas encontradas na tabela:', characteristicsData.length);
    
    // Procurar pela caracter√≠stica "modelo"
    console.log('üîç Procurando caracter√≠stica "modelo" em:', characteristicsData.map(c => c.caracteristica));
    const modeloChar = characteristicsData.find((char: any) => 
      char.caracteristica && char.caracteristica.toLowerCase().includes('modelo')
    );
    
    if (modeloChar && modeloChar.resposta) {
      modeloValue = modeloChar.resposta;
      console.log('‚úÖ Valor da caracter√≠stica "modelo" encontrado na tabela:', modeloValue);
      console.log('‚úÖ Caracter√≠stica completa:', modeloChar);
    } else {
      console.log('‚ùå Caracter√≠stica "modelo" n√£o encontrada na tabela respostas_caracteristicas');
      console.log('üîç Caracter√≠sticas dispon√≠veis:', characteristicsData.map(c => ({ caracteristica: c.caracteristica, resposta: c.resposta })));
    }
    
    // Usar APENAS os campos espec√≠ficos permitidos na Etapa 2
    // Valores v√™m APENAS do payload da primeira etapa (anymarketData)
    // ID: usa o id do anymarketData (j√° obtido na primeira etapa)
    const putPayload = {
      id: anymarketData.id, // ‚Üê ID do produto no Anymarket (da primeira etapa)
      title: newTitle, // ‚Üê T√≠tulo da tabela titles
      description: newDescription || anymarketData.description, // ‚Üê Descri√ß√£o da tabela descriptions ou manter atual
      category: anymarketData.category,
      brand: anymarketData.brand,
      model: modeloValue, // ‚Üê Valor da caracter√≠stica "modelo" ou valor padr√£o
      gender: anymarketData.gender,
      warrantyTime: 1, // ‚Üê VALOR FIXO OBRIGAT√ìRIO
      warrantyText: "Garantia de F√°brica", // ‚Üê VALOR FIXO OBRIGAT√ìRIO
      priceFactor: 1, // ‚Üê VALOR FIXO OBRIGAT√ìRIO
      characteristics: productCharacteristics // ‚Üê Caracter√≠sticas da tabela respostas_caracteristicas
    };

    console.log('üì¶ Payload PUT (campos espec√≠ficos permitidos):', JSON.stringify(putPayload, null, 2));
    console.log('üîç Valor final do model no payload:', putPayload.model);
    console.log('üîç Caracter√≠sticas inclu√≠das no payload:', productCharacteristics.length > 0 ? productCharacteristics.map(c => `${c.name}: ${c.value}`).join(', ') : 'Nenhuma');
    console.log('üîç Estrutura do campo characteristics no payload:', JSON.stringify(putPayload.characteristics, null, 2));

    // 5. ETAPA 2: Fazer PATCH para atualizar produto (recomendado para caracter√≠sticas)
    console.log('üîÑ ETAPA 2: Fazendo PATCH para atualizar produto...');
    
    // Preparar payload PATCH com opera√ß√µes espec√≠ficas
    const patchOperations = [];
    
    // Adicionar opera√ß√£o para atualizar t√≠tulo se necess√°rio
    if (anymarketData.title !== newTitle) {
      patchOperations.push({
        op: 'replace',
        path: '/title',
        value: newTitle
      });
    }
    
    // Adicionar opera√ß√£o para atualizar descri√ß√£o se necess√°rio
    if (newDescription && anymarketData.description !== newDescription) {
      patchOperations.push({
        op: 'replace',
        path: '/description',
        value: newDescription
      });
    }
    
    // Adicionar opera√ß√£o para atualizar caracter√≠sticas se existirem
    if (productCharacteristics.length > 0) {
      patchOperations.push({
        op: 'replace',
        path: '/characteristics',
        value: productCharacteristics
      });
    }
    
    const patchPayload = {
      title: newTitle,
      description: newDescription || anymarketData.description,
      characteristics: productCharacteristics
    };

    // Adicionar campo model se foi extra√≠do da caracter√≠stica
    if (modeloValue && modeloValue !== anymarketData.model) {
      patchPayload.model = modeloValue;
      console.log('‚úÖ Campo model adicionado ao payload PATCH:', modeloValue);
    }

    console.log('üì¶ Payload PATCH (merge-patch):', JSON.stringify(patchPayload, null, 2));
    
    const patchResponse = await fetch(`https://api.anymarket.com.br/v2/products/${anymarketData.id}`, {
      method: 'PATCH',
      headers: {
        'gumgaToken': process.env.ANYMARKET || '',
        'Content-Type': 'application/merge-patch+json',
        'User-Agent': 'Meli-Integration/1.0',
        'Accept': 'application/json'
      },
      body: JSON.stringify(patchPayload),
      cache: 'no-store'
    });

    console.log('üì° Resposta do PATCH:', {
      status: patchResponse.status,
      statusText: patchResponse.statusText,
      ok: patchResponse.ok
    });

    if (!patchResponse.ok) {
      const errorData = await patchResponse.json();
      console.error('‚ùå Erro no PATCH:', errorData);
      throw new Error(`Erro ao atualizar produto: ${errorData.message || 'Erro desconhecido'}`);
    }

    const patchResult = await patchResponse.json();
    console.log('‚úÖ ETAPA 2 CONCLU√çDA: PATCH realizado com sucesso:', patchResult);

    // 3. Salvar log de sincroniza√ß√£o na tabela anymarket_sync_logs
    try {
      await saveSyncLog(
        productId,
        anymarketId.toString(),
        newTitle,
        newDescription || '',
        true,
        patchResult,
        undefined,
        'info',
        'update'
      );
      console.log('üìÖ Log de sincroniza√ß√£o salvo na tabela anymarket_sync_logs');
    } catch (logError) {
      console.error('‚ö†Ô∏è Erro ao salvar log de sincroniza√ß√£o (n√£o cr√≠tico):', logError);
    }

    // Determinar quais campos foram atualizados para a mensagem
    const updatedFields = updates.map(update => update.field).join(' e ');
    const characteristicsMessage = productCharacteristics.length > 0 ? ` e ${productCharacteristics.length} caracter√≠sticas` : '';
    
    return NextResponse.json({
      success: true,
      message: `Produto atualizado com sucesso: ${updatedFields}${characteristicsMessage} atualizados`,
      data: {
        anymarket_id: anymarketId,
        action: 'product_updated_patch',
        updates: updates,
        characteristics: productCharacteristics,
        characteristics_count: productCharacteristics.length,
        patch_payload: {
          title: newTitle,
          description: newDescription || anymarketData.description,
          characteristics: productCharacteristics
        },
        response: patchResult,
        timestamp: new Date().toISOString()
      }
    });

  } catch (error: any) {
    console.error('‚ùå Erro ao atualizar produto:', error);
    
    return NextResponse.json({
      success: false,
      message: 'Erro interno do servidor ao atualizar produto',
      error: error.message
    }, { status: 500 });
  }
}
