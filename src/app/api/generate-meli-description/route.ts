import { NextRequest, NextResponse } from 'next/server';
import { executeQuery } from '@/lib/database';

export async function POST(request: NextRequest) {
  try {
    console.log('üîÑ Iniciando gera√ß√£o de descri√ß√£o do Marketplace...');
    
    const body = await request.json();
    console.log('üìù Body recebido:', body);
    
    const { productId, forceRegenerate = false } = body;

    if (!productId) {
      console.log('‚ùå productId n√£o fornecido');
      return NextResponse.json({
        success: false,
        message: 'productId √© obrigat√≥rio'
      }, { status: 400 });
    }

    console.log('üîÑ Gerando descri√ß√£o do Marketplace para produto ID:', productId);

    // 1. Buscar dados completos do produto
    console.log('üîç Buscando dados do produto...');
    const productQuery = `
      SELECT 
        p.*,
        b.name as brand_name,
        c.name as category_name
      FROM products p
      LEFT JOIN brands b ON p.brand_id = b.id
      LEFT JOIN categories c ON p.category_id = c.id
      WHERE p.id = ?
    `;

    const products = await executeQuery(productQuery, [productId]);
    console.log('üìä Resultado da busca do produto:', products?.length || 0, 'registros');
    
    if (products.length === 0) {
      console.log('‚ùå Produto n√£o encontrado');
      return NextResponse.json({
        success: false,
        message: 'Produto n√£o encontrado'
      }, { status: 404 });
    }

    const product = products[0];
    console.log('üì¶ Produto encontrado:', product.name);

    // 2. Buscar an√°lise de imagens mais recente
    let imageAnalysis = null;
    try {
      console.log('üîç Buscando an√°lise de imagens...');
      const analysisQuery = `
        SELECT 
          ial.*,
          a.name as agent_name
        FROM image_analysis_logs ial
        LEFT JOIN agents a ON ial.agent_id = a.id
        WHERE ial.product_id = ?
        ORDER BY ial.created_at DESC
        LIMIT 1
      `;
      
      const analyses = await executeQuery(analysisQuery, [productId]);
      console.log('üìä An√°lises encontradas:', analyses?.length || 0);
      
      if (analyses.length > 0) {
        imageAnalysis = analyses[0];
        console.log('üñºÔ∏è An√°lise de imagem encontrada');
      } else {
        console.log('üñºÔ∏è Nenhuma an√°lise de imagem encontrada');
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Erro ao buscar an√°lise de imagens:', error);
    }

    // 3. Verificar se j√° existe descri√ß√£o (se n√£o for regenera√ß√£o for√ßada)
    if (!forceRegenerate) {
      console.log('üîç Verificando se j√° existe descri√ß√£o...');
      const existingQuery = `SELECT * FROM meli WHERE product_id = ?`;
      const existing = await executeQuery(existingQuery, [productId]);
      console.log('üìä Descri√ß√µes existentes:', existing?.length || 0);
      
      if (existing.length > 0) {
        console.log('‚úÖ Descri√ß√£o j√° existe, retornando...');
        return NextResponse.json({
          success: true,
          data: existing[0],
          message: 'Descri√ß√£o j√° existe'
        });
      }
    }

    // 4. Gerar descri√ß√£o usando OpenAI
    console.log('ü§ñ Chamando OpenAI...');
    const openaiResponse = await generateMeliDescriptionWithOpenAI(product, imageAnalysis);
    console.log('ü§ñ Resposta da OpenAI:', openaiResponse.success ? 'Sucesso' : 'Erro');
    
    if (!openaiResponse.success) {
      console.log('‚ùå Erro na OpenAI:', openaiResponse.error);
      return NextResponse.json({
        success: false,
        message: openaiResponse.error || 'Erro ao gerar descri√ß√£o com IA'
      }, { status: 500 });
    }

    const { title, description, keywords, categoryId, condition, warranty, shippingInfo, tokensUsed } = openaiResponse.data || {};
    console.log('üìù Dados gerados:', { title: title?.substring(0, 50) + '...', description: description?.substring(0, 50) + '...' });

    // 5. Salvar no banco de dados
    console.log('üíæ Salvando no banco de dados...');
    const saveResponse = await fetch(`${request.nextUrl.origin}/api/meli`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        productId,
        title,
        description,
        keywords,
        categoryId,
        condition,
        warranty,
        shippingInfo,
        tokensUsed,
        agentUsed: 'Agente Marketplace',
        modelUsed: 'gpt-4o-mini'
      })
    });

    const saveResult = await saveResponse.json();
    console.log('üíæ Resultado do salvamento:', saveResult.success ? 'Sucesso' : 'Erro');
    
    if (!saveResult.success) {
      console.log('‚ùå Erro ao salvar:', saveResult.message);
      return NextResponse.json({
        success: false,
        message: 'Erro ao salvar descri√ß√£o no banco de dados'
      }, { status: 500 });
    }

    console.log('‚úÖ Descri√ß√£o do Marketplace gerada com sucesso!');
    return NextResponse.json({
      success: true,
      data: {
        ...saveResult.data,
        title,
        description,
        keywords,
        categoryId,
        condition,
        warranty,
        shippingInfo,
        tokensUsed
      }
    });

  } catch (error: any) {
    console.error('‚ùå Erro ao gerar descri√ß√£o do Marketplace:', error);
    
    return NextResponse.json({
      success: false,
      message: 'Erro interno do servidor ao gerar descri√ß√£o',
      error: error.message
    }, { status: 500 });
  }
}

async function generateMeliDescriptionWithOpenAI(product: any, imageAnalysis: any) {
  try {
    console.log('ü§ñ Iniciando gera√ß√£o com OpenAI...');
    console.log('üì¶ Produto:', product.name);
    console.log('üñºÔ∏è An√°lise de imagem:', imageAnalysis ? 'Dispon√≠vel' : 'N√£o dispon√≠vel');
    
    // Buscar chave da OpenAI das configura√ß√µes do banco
    console.log('üîç Buscando chave da OpenAI...');
    const settings = await executeQuery(`
      SELECT config_value 
      FROM system_config 
      WHERE config_key = 'openai_api_key'
    `);

    console.log('üìä Configura√ß√µes encontradas:', settings?.length || 0);

    if (!settings || settings.length === 0) {
      console.log('‚ö†Ô∏è Chave da OpenAI n√£o configurada no banco');
      throw new Error('Chave da API OpenAI n√£o configurada. Configure em Configura√ß√µes > IA.');
    }

    const openaiApiKey = settings[0].config_value;
    console.log('üîë Chave da API OpenAI:', openaiApiKey ? 'Configurada' : 'N√ÉO CONFIGURADA');
    
    if (!openaiApiKey || openaiApiKey.trim() === '') {
      console.log('‚ö†Ô∏è Chave da OpenAI est√° vazia');
      throw new Error('Chave da API OpenAI est√° vazia. Configure em Configura√ß√µes > IA.');
    }

    console.log('‚úÖ Chave da OpenAI encontrada, continuando...');

    // Construir prompt para o Marketplace
    const systemPrompt = `Voc√™ √© um especialista em e-commerce e marketing digital, focado especificamente no Marketplace. Sua tarefa √© criar t√≠tulos e descri√ß√µes otimizadas para produtos de moda e vestu√°rio que maximizem a visibilidade e convers√£o no Marketplace.

REGRAS IMPORTANTES:
1. T√≠tulo deve ter entre 60-100 caracteres (limite do Marketplace)
2. Descri√ß√£o deve ser entre 400-800 palavras, estruturada e detalhada
3. Use palavras-chave relevantes para SEO
4. Inclua informa√ß√µes t√©cnicas e de qualidade
5. Seja persuasivo mas honesto
6. Foque nos benef√≠cios para o cliente
7. Use linguagem clara e direta
8. Estruture a descri√ß√£o com se√ß√µes organizadas

ESTRUTURA DA DESCRI√á√ÉO:
- Par√°grafo introdut√≥rio sobre o produto
- Informa√ß√µes sobre a marca e qualidade
- Detalhes t√©cnicos e materiais
- Benef√≠cios e caracter√≠sticas
- Se√ß√£o "Destaques do produto" com bullet points
- Se√ß√£o "Material e cuidados"
- Se√ß√£o "Por que escolher" com vantagens
- Se√ß√£o "FAQ - Perguntas frequentes" com 4-5 perguntas
- Call-to-action final

FORMATO DE RESPOSTA (JSON):
{
  "title": "t√≠tulo otimizado",
  "description": "descri√ß√£o completa estruturada",
  "keywords": "palavra1, palavra2, palavra3",
  "categoryId": "MLB123456",
  "condition": "new",
  "warranty": "Garantia do fabricante",
  "shippingInfo": "Frete gr√°tis para todo Brasil"
}`;

    const userPrompt = `Crie uma descri√ß√£o otimizada para o Marketplace para este produto:

PRODUTO ORIGINAL: ${product.name}
REF_ID: ${product.ref_id || 'N/A'}
MARCA: ${product.brand_name || 'N/A'}
CATEGORIA: ${product.category_name || 'N/A'}
DESCRI√á√ÉO ATUAL: ${product.description || 'N/A'}
T√çTULO ATUAL: ${product.title || 'N/A'}

${imageAnalysis ? `
AN√ÅLISE T√âCNICA DAS IMAGENS:
${imageAnalysis.contextual_analysis}
` : ''}

IMPORTANTE: 
- Crie um NOVO T√çTULO otimizado (n√£o use o nome original do produto)
- Na descri√ß√£o, use o NOVO T√çTULO que voc√™ criou, n√£o o nome original
- O novo t√≠tulo deve ser mais atrativo e otimizado para SEO

ESTRUTURA OBRIGAT√ìRIA DA DESCRI√á√ÉO:
1. Par√°grafo introdut√≥rio sobre o produto (use o novo t√≠tulo)
2. Informa√ß√µes sobre a marca e qualidade
3. Detalhes t√©cnicos e materiais
4. Benef√≠cios e caracter√≠sticas
5. Se√ß√£o "Destaques do produto" com bullet points
6. Se√ß√£o "Material e cuidados"
7. Se√ß√£o "Por que escolher" com vantagens
8. Se√ß√£o "FAQ - Perguntas frequentes" com 4-5 perguntas
9. Call-to-action final

EXEMPLO DE ESTRUTURA:
"[Novo T√≠tulo] foi desenvolvido para quem busca [benef√≠cio principal]... 

A marca [Marca] √© reconhecida por [caracter√≠sticas da marca]...

Fabricado em [material], o produto oferece [benef√≠cios t√©cnicos]...

Destaques do produto:
‚Ä¢ [Caracter√≠stica 1]: [benef√≠cio]
‚Ä¢ [Caracter√≠stica 2]: [benef√≠cio]

Material e cuidados:
Material principal: [material]
Cuidados de limpeza: [instru√ß√µes]

Por que escolher [Novo T√≠tulo]:
‚Ä¢ [Vantagem 1]
‚Ä¢ [Vantagem 2]

FAQ ‚Äì Perguntas frequentes:
[Pergunta 1]?
[Resposta 1]

[Pergunta 2]?
[Resposta 2]

Garanta agora o [Novo T√≠tulo] e [call-to-action]."

Retorne APENAS o JSON com as informa√ß√µes solicitadas.`;

    console.log('üåê Chamando API da OpenAI...');
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openaiApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: userPrompt }
        ],
        max_tokens: 3000,
        temperature: 0.7,
        response_format: { type: 'json_object' }
      }),
    });

    if (!response.ok) {
      const errorData = await response.text();
      console.error('‚ùå Erro na API OpenAI:', response.status, errorData);
      throw new Error(`Erro na API OpenAI: ${response.status} - ${errorData}`);
    }

    const data = await response.json();
    console.log('‚úÖ Resposta da OpenAI recebida');

    if (!data.choices || !data.choices[0] || !data.choices[0].message) {
      throw new Error('Resposta inv√°lida da OpenAI');
    }

    const content = data.choices[0].message.content;
    console.log('üìù Conte√∫do recebido:', content?.substring(0, 100) + '...');

    let parsedContent;
    try {
      parsedContent = JSON.parse(content);
    } catch (parseError) {
      console.error('‚ùå Erro ao fazer parse do JSON:', parseError);
      throw new Error('Resposta da OpenAI n√£o √© um JSON v√°lido');
    }

    return {
      success: true,
      data: {
        title: parsedContent.title || 'T√≠tulo n√£o gerado',
        description: parsedContent.description || 'Descri√ß√£o n√£o gerada',
        keywords: parsedContent.keywords || '',
        categoryId: parsedContent.categoryId || 'MLB12345',
        condition: parsedContent.condition || 'new',
        warranty: parsedContent.warranty || 'Garantia de 30 dias contra defeitos de fabrica√ß√£o',
        shippingInfo: parsedContent.shippingInfo || 'Frete gr√°tis para todo o Brasil',
        tokensUsed: data.usage?.total_tokens || 0
      }
    };

  } catch (error: any) {
    console.error('‚ùå Erro na gera√ß√£o com OpenAI:', error);
    return {
      success: false,
      error: error.message
    };
  }
}