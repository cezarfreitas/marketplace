const mysql = require('mysql2/promise');

async function deleteProductImagesTable() {
  let connection;
  
  try {
    // Configura√ß√£o do banco de dados
    const dbConfig = {
      host: 'server.idenegociosdigitais.com.br',
      port: 3349,
      user: 'meli',
      password: '7dd3e59ddb3c3a5da0e3',
      database: 'meli',
      charset: 'utf8mb4'
    };

    console.log('üîç Conectando ao banco de dados...');
    connection = await mysql.createConnection(dbConfig);
    
    // 1. Verificar se a tabela existe antes de excluir
    console.log('\nüìã 1. Verificando se a tabela product_images existe...');
    const [tables] = await connection.execute(`
      SELECT TABLE_NAME 
      FROM information_schema.TABLES 
      WHERE TABLE_SCHEMA = 'meli' 
      AND TABLE_NAME = 'product_images'
    `);
    
    if (tables.length === 0) {
      console.log('‚ùå Tabela product_images n√£o existe. Nada para excluir.');
      return;
    }
    
    console.log('‚úÖ Tabela product_images encontrada');
    
    // 2. Verificar se h√° dados na tabela
    console.log('\nüìä 2. Verificando dados na tabela...');
    const [countResult] = await connection.execute('SELECT COUNT(*) as total FROM product_images');
    const totalRecords = countResult[0].total;
    console.log(`üìä Total de registros: ${totalRecords}`);
    
    if (totalRecords > 0) {
      console.log('‚ö†Ô∏è ATEN√á√ÉO: A tabela cont√©m dados!');
      console.log('‚ùì Deseja realmente excluir a tabela com dados?');
      console.log('üí° Recomenda√ß√£o: Fa√ßa backup dos dados antes de excluir');
      return;
    }
    
    // 3. Verificar foreign keys e constraints
    console.log('\nüîó 3. Verificando constraints e foreign keys...');
    const [constraints] = await connection.execute(`
      SELECT 
        CONSTRAINT_NAME,
        TABLE_NAME,
        COLUMN_NAME,
        REFERENCED_TABLE_NAME,
        REFERENCED_COLUMN_NAME
      FROM information_schema.KEY_COLUMN_USAGE 
      WHERE TABLE_SCHEMA = 'meli' 
      AND (TABLE_NAME = 'product_images' OR REFERENCED_TABLE_NAME = 'product_images')
    `);
    
    if (constraints.length > 0) {
      console.log('üìã Constraints encontradas:');
      console.table(constraints);
    } else {
      console.log('‚úÖ Nenhuma constraint encontrada');
    }
    
    // 4. Confirmar exclus√£o
    console.log('\nüóëÔ∏è 4. Preparando para excluir a tabela product_images...');
    console.log('‚ö†Ô∏è Esta opera√ß√£o √© IRREVERS√çVEL!');
    console.log('üìã Resumo:');
    console.log(`   - Tabela: product_images`);
    console.log(`   - Registros: ${totalRecords}`);
    console.log(`   - Constraints: ${constraints.length}`);
    
    // 5. Executar exclus√£o
    console.log('\nüöÄ 5. Executando exclus√£o da tabela...');
    
    try {
      await connection.execute('DROP TABLE IF EXISTS product_images');
      console.log('‚úÖ Tabela product_images exclu√≠da com sucesso!');
      
      // 6. Verificar se foi realmente exclu√≠da
      console.log('\nüîç 6. Verificando se a tabela foi exclu√≠da...');
      const [verifyTables] = await connection.execute(`
        SELECT TABLE_NAME 
        FROM information_schema.TABLES 
        WHERE TABLE_SCHEMA = 'meli' 
        AND TABLE_NAME = 'product_images'
      `);
      
      if (verifyTables.length === 0) {
        console.log('‚úÖ Confirma√ß√£o: Tabela product_images foi exclu√≠da com sucesso');
      } else {
        console.log('‚ùå Erro: Tabela ainda existe ap√≥s tentativa de exclus√£o');
      }
      
    } catch (dropError) {
      console.error('‚ùå Erro ao excluir tabela:', dropError.message);
      throw dropError;
    }
    
  } catch (error) {
    console.error('‚ùå Erro:', error.message);
    console.error('Stack trace:', error.stack);
  } finally {
    if (connection) {
      await connection.end();
    }
  }
}

// Executar o script
deleteProductImagesTable();
